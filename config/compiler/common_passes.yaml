passes:
  - dataquery_identification: {}
  - unspec: {}

  ###########################################################################
  # We don't have an explicit way to acces the "identifier" (ie: plugin ID) #
  # for panels and dataqueries.                                             #
  # The heuristic we use sometimes gets things wrong, so we have to fix     #
  # things here.                                                            #
  ###########################################################################

  # Panels
  - schema_set_identifier: { package: alertgroups, identifier: alertGroups }
  - schema_set_identifier: { package: annotationslist, identifier: annolist }
  - schema_set_identifier: { package: dashboardlist, identifier: dashlist }
  - schema_set_identifier: { package: nodegraph, identifier: nodeGraph }
  - schema_set_identifier: { package: statetimeline, identifier: state-timeline }
  - schema_set_identifier: { package: statushistory, identifier: status-history }
  - schema_set_identifier: { package: tableold, identifier: table-old }
  # Datasources
  - schema_set_identifier: { package: googlecloudmonitoring, identifier: cloud-monitoring }
  - schema_set_identifier: { package: azuremonitor, identifier: grafana-azure-monitor-datasource }
  - schema_set_identifier: { package: microsoftsqlserver, identifier: mssql }
  - schema_set_identifier: { package: postgresql, identifier: postgres }

  #############
  # Dashboard #
  #############

  # These fields are incorrectly set as non-required in the CUE schema.
  # Loading a dashboard with these set to null will fail.
  - fields_set_required:
      fields: [
        dashboard.Dashboard.annotations,
        dashboard.Dashboard.templating,
      ]

  # Defined as an empty type in the CUE schemas.
  # It is also not used at all: references to this type are replaced by a "composable slot"
  - omit:
      objects: [
        dashboard.Target
      ]

  - name_anonymous_struct:
      field: dashboard.Dashboard.timepicker
      as: TimePicker

  - retype_field:
      field: dashboard.Panel.Targets
      as:
        kind: array
        array:
          value_type:
            kind: composable_slot
            composable_slot: { variant: dataquery }

  - dashboard_panels: {}

  ########################
  # Prometheus dataquery #
  ########################

  # Add a few missing fields.
  # This is meant to be removed once the schema is updated.
  - add_fields:
      to: prometheus.dataquery
      fields:
        - name: interval
          comments: ['An additional lower limit for the step parameter of the Prometheus query and for the', '`$__interval` and `$__rate_interval` variables.']
          type:
            kind: scalar
            scalar: { scalar_kind: string }

  ######################
  # testdata dataquery #
  ######################

  - name_anonymous_struct:
      field: testdata.SimulationQuery.key
      as: Key

  ###############
  # table panel #
  ###############

  - fields_set_not_required:
      fields: [ common.TableFieldOptions.CellOptions ]

  #####################
  # candlestick panel #
  #####################

  # This field is parsed incorrectly from the CUE schema: its definition and
  # defaults are merged for some reason.
  # TODO: remove once the parser is fixed.
  # See: https://github.com/grafana/cog/issues/292
  - retype_field:
      field: candlestick.Options.colors
      as:
        kind: ref
        ref: { referred_pkg: candlestick, referred_type: CandlestickColors }
        default: { down: "red", up: "green", flat: "gray" }

  #################
  # heatmap panel #
  #################

  # These fields are parsed incorrectly from the CUE schema: their definitions and
  # defaults are merged for some reason.
  # TODO: remove once the parser is fixed.
  # See: https://github.com/grafana/cog/issues/292
  - retype_field:
      field: heatmap.Options.legend
      as:
        kind: ref
        ref: { referred_pkg: heatmap, referred_type: HeatmapLegend }
        default: { show: true }
  - retype_field:
      field: heatmap.Options.exemplars
      as:
        kind: ref
        ref: { referred_pkg: heatmap, referred_type: ExemplarConfig }
        default: { color: "rgba(255,0,255,0.7)" }

  ##########
  # Others #
  ##########

  - cloudwatch: {}
  - google_cloud_monitoring: {}
  - library_panels: {}
