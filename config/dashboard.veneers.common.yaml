language: all

builders:
  ##############
  # Dashboards #
  ##############

  # We don't want these builders at all
  - omit: { by_object: dashboard.GridPos }
  - omit: { by_object: dashboard.DataSourceRef }
  - omit: { by_object: dashboard.LibraryPanelRef }
  - omit: { by_object: dashboard.VariableOption }
  - omit: { by_object: dashboard.Threshold }
  # overrides and transformations related
  - omit: { by_object: dashboard.MatcherConfig }
  - omit: { by_object: dashboard.DynamicConfigValue }
  - omit: { by_object: dashboard.DataTransformerConfig }

  - rename:
      by_object: dashboard.RowPanel
      as: Row

  # Rearrange things a bit
  - merge_into:
      source: dashboard.FieldConfig
      destination: dashboard.Panel
      under_path: fieldConfig.defaults
      exclude_options: [
        # don't copy these over as they clash with a similarly named options from Panel
        "description", "links",

        # TODO: check if these are actually relevant
        "displayNameFromDS", "filterable", "path", "writeable",
      ]
  - merge_into:
      source: dashboard.FieldConfigSource
      destination: dashboard.Panel
      under_path: fieldConfig

  # Panels composability
  - compose_dashboard_panel:
      panel_builder_name: dashboard.Panel
      exclude_panel_options: &UnwantedPanelOptions [
        "id",            # generated by the backend
        "fieldConfig",   # merged with another builder
        "options",       # comes from a panel plugin
        "custom",        # comes from a panel plugin
        "pluginVersion", # TODO: check if it's relevant or not
        "repeatPanelId", # TODO: check if it's relevant or not
        "tags",          # TODO: check if it's relevant or not
      ]

  # remove builders that were previously merged into something else
  - omit: { by_object: dashboard.FieldConfig }
  - omit: { by_object: dashboard.FieldConfigSource }

  # No need for builders for structs generated from a disjunction
  - omit: { generated_from_disjunction: true }

options:
  ##############
  # Dashboards #
  ##############

  # Make the dashboard constructor more friendly
  - promote_to_constructor: { by_name: Dashboard.title }

  # `Tooltip` looks better than `GraphTooltip`
  - rename:
      by_name: Dashboard.graphTooltip
      as: tooltip

  # Editable() + Readonly() instead of Editable(val bool)
  - unfold_boolean:
      by_name: Dashboard.editable
      true_as: editable
      false_as: readonly

  # Refresh(string) instead of Refresh(struct StringOrBool)
  - struct_fields_as_arguments:
      by_name: Dashboard.refresh
      fields: [String]

  # Append a single `panel|row` value instead of a list of everything
  - array_to_append:
      by_name: Dashboard.panels
  # Panel(...) and RowPanel(...) instead of panels(...(Panel|RowPanel))
  - disjunction_as_options:
      by_name: Dashboard.panels
  # Panel() to WithPanel()
  - rename:
      by_name_case_insensitive: Dashboard.panel
      as: withPanel
  # RowPanel() to WithRow()
  - rename:
      by_name_case_insensitive: Dashboard.rowPanel
      as: withRow

  # Templating([]VariableModel) instead of Templating(struct []struct{List []VariableModel})
  - struct_fields_as_arguments:
      by_name: Dashboard.templating
      fields: [list]
  # Append a single variable instead forcing to define every variable at once
  - array_to_append:
      by_name: Dashboard.templating
  # Templating() to WithVariable()
  - rename:
      by_name_case_insensitive: Dashboard.templating
      as: withVariable

  # We don't want these options at all
  - omit: { by_name: Dashboard.schemaVersion }

  ##############
  #   Panels   #
  ##############

  - omit: { by_names: {object: Panel, options: *UnwantedPanelOptions} }

  # Append a single target instead forcing to define all of them at once
  - array_to_append:
      by_name: Panel.targets
  # Targets() to WithTarget()
  - rename:
      by_name_case_insensitive: Panel.targets
      as: withTarget

  # Append a single override instead forcing to define all of them at once
  - array_to_append:
      by_name: Panel.overrides
  # Overrides() to WithOverride()
  - rename:
      by_name_case_insensitive: Panel.overrides
      as: withOverride
  # WithOverride(matcher, properties) instead of WithOverride(struct{...})
  - struct_fields_as_arguments:
      by_name: Panel.withOverride

  # Append a single transformation instead forcing to define all of them at once
  - array_to_append:
      by_name: Panel.transformations
  # Overrides() to WithOverride()
  - rename:
      by_name_case_insensitive: Panel.transformations
      as: withTransformation

  # W(), H() instead of explicit GridPos() definition
  - struct_fields_as_options:
      by_name: Panel.gridPos
      fields: [w, h]
  # W() → Span()
  - rename:
      by_name_case_insensitive: Panel.w
      as: span
  # H() → Height()
  - rename:
      by_name_case_insensitive: Panel.h
      as: height

  ##############
  #    Rows    #
  ##############

  - omit: { by_name: RowPanel.gridPos }

  # Make the constructor more friendly
  - promote_to_constructor: { by_name: RowPanel.title }
