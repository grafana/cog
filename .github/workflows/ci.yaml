name: CI
on:
  pull_request: ~
  push:
    branches: [main] # so that we build a Go cache that can be re-used in PRs

env:
  JAVA_VERSION: '17'

jobs:
  linters:
    name: Linters
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install devbox
        uses: jetify-com/devbox-install-action@v0.11.0
        with:
          enable-cache: 'true'

      - name: Run golangci-lint
        run: devbox run lint

  tests:
    name: Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install devbox
        uses: jetify-com/devbox-install-action@v0.11.0
        with:
          enable-cache: 'true'

      - name: Tests
        run: devbox run tests

  registry:
    name: Generate registry
    runs-on: ubuntu-latest

    strategy:
      matrix:
        kind_version: [next, v11.2.x, v11.1.x, v11.0.x, v10.4.x, v10.3.x, v10.2.x, v10.1.x]

    steps:
      - uses: actions/checkout@v4

      - name: Install devbox
        uses: jetify-com/devbox-install-action@v0.11.0
        with:
          enable-cache: 'true'

      - name: Setup Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          check-latest: true
      - name: Java setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: '8.8'

      - name: Clone kind-registry
        run: git clone --depth=1 https://github.com/grafana/kind-registry.git ../kind-registry

      - name: Run code generation
        run: |
          devbox run go run cmd/cli/main.go generate \
            --config ./config/foundation_sdk.dev.yaml \
            --parameters output_dir=./generated/%l,grafana_version=${{ matrix.kind_version == 'next' && 'main' || matrix.kind_version }},kind_registry_version=${{ matrix.kind_version }},go_package_root=github.com/grafana/cog/generated/go

      - name: Compile generated Go code
        run: |
          for d in generated/go/*/ ; do
            echo "Building $d"
            devbox run go build "./$d"
          done

      - name: Compile generated Typescript code
        run: |
          for d in generated/typescript/src/*/ ; do
            echo "Building $d"
            devbox run ts-node "./$d"
          done

      - name: Lint generated Python code
        run: devbox run mypy generated/python/

      - name: Compile generated Java code
        run: gradle build -p generated/java
      
      - name: Lint generated PHP code with phpstan
        run: devbox run phpstan analyze --memory-limit 256M -c .config/ci/php/phpstan.neon

      - name: Lint generated PHP code with psalm
        run: devbox run psalm -c .config/ci/php/psalm.xml generated/php

  examples:
    name: Run examples
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install devbox
        uses: jetify-com/devbox-install-action@v0.11.0
        with:
          enable-cache: 'true'

      - name: Setup Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          check-latest: true
      - name: Java setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: '8.8'

      - name: Clone kind-registry
        run: git clone --depth=1 https://github.com/grafana/kind-registry.git ../kind-registry

      - name: Run code generation
        run: |
          devbox run go run cmd/cli/main.go generate \
            --config ./config/foundation_sdk.dev.yaml \
            --parameters kind_registry_version=next,grafana_version=main

      - name: Run the Go example
        run: |
          devbox run go-example

      - name: Run the Typescript example
        run: |
          devbox run ts-example

      - name: Run the PHP example
        run: |
          devbox run php-example

      - name: Run Java example
        run: |
          gradle publishToMavenLocal -p generated
          gradle run -p examples/java
