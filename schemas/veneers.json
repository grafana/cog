{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://raw.githubusercontent.com/grafana/cog/main/schemas/veneers.json",
  "$ref": "#/$defs/YamlVeneers",
  "$defs": {
    "AstArgument": {
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/$defs/AstType"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "AstArrayType": {
      "properties": {
        "value_type": {
          "$ref": "#/$defs/AstType"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "AstAssignmentEnvelope": {
      "properties": {
        "type": {
          "$ref": "#/$defs/AstType",
          "description": "Should be a ref or a struct only"
        },
        "values": {
          "items": {
            "$ref": "#/$defs/AstEnvelopeFieldValue"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "AstAssignmentValue": {
      "properties": {
        "argument": {
          "$ref": "#/$defs/AstArgument"
        },
        "constant": true,
        "envelope": {
          "$ref": "#/$defs/AstAssignmentEnvelope"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "AstComposableSlotType": {
      "properties": {
        "variant": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "AstDisjunctionType": {
      "properties": {
        "branches": {
          "$ref": "#/$defs/AstTypes"
        },
        "discriminator": {
          "type": "string",
          "description": "If the branches are references to structs, some languages will need\nextra context to be able to distinguish between them. Golang, for\nexample, doesn't support sum types (disjunctions of fixed types).\nTo emulate sum types for these languages, we need a way to\ndiscriminate against every possible type.\n\nTo do that, we need two things:\n\t- a discriminator: the name of a field that is present in all types.\n\t  The value of which identifies the type being used.\n - a mapping: associating a \"discriminator value\" to a type."
        },
        "discriminatormapping": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "AstEnumType": {
      "properties": {
        "values": {
          "items": {
            "$ref": "#/$defs/AstEnumValue"
          },
          "type": "array",
          "description": "possible values. Value types might be different"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "AstEnumValue": {
      "properties": {
        "type": {
          "$ref": "#/$defs/AstType"
        },
        "name": {
          "type": "string"
        },
        "value": true
      },
      "additionalProperties": false,
      "type": "object"
    },
    "AstEnvelopeFieldValue": {
      "properties": {
        "path": {
          "$ref": "#/$defs/AstPath",
          "description": "where to assign within the struct/ref"
        },
        "value": {
          "$ref": "#/$defs/AstAssignmentValue",
          "description": "what to assign"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "AstIntersectionType": {
      "properties": {
        "branches": {
          "items": {
            "$ref": "#/$defs/AstType"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "AstJenniesHints": {
      "type": "object",
      "description": "meant to be used by jennies, to gain a finer control on the codegen from schemas"
    },
    "AstMapType": {
      "properties": {
        "indextype": {
          "$ref": "#/$defs/AstType"
        },
        "valuetype": {
          "$ref": "#/$defs/AstType"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "AstPath": {
      "items": {
        "$ref": "#/$defs/AstPathItem"
      },
      "type": "array"
    },
    "AstPathItem": {
      "properties": {
        "identifier": {
          "type": "string"
        },
        "type": {
          "$ref": "#/$defs/AstType",
          "description": "any"
        },
        "typehint": {
          "$ref": "#/$defs/AstType",
          "description": "useful mostly for composability purposes, when a field Type is \"any\"\nand we're trying to \"compose in\" something of a known type."
        },
        "root": {
          "type": "boolean",
          "description": "Is this element of the path the root? (ie: a variable, not a member of a struct)"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "AstRefType": {
      "properties": {
        "referred_pkg": {
          "type": "string"
        },
        "referred_type": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "AstScalarType": {
      "properties": {
        "scalar_kind": {
          "type": "string",
          "description": "bool, bytes, string, int, float, ..."
        },
        "value": {
          "description": "if value isn't nil, we're representing a constant scalar"
        },
        "constraints": {
          "items": {
            "$ref": "#/$defs/AstTypeConstraint"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "AstStructField": {
      "properties": {
        "name": {
          "type": "string"
        },
        "comments": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "$ref": "#/$defs/AstType"
        },
        "required": {
          "type": "boolean"
        },
        "passestrail": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "AstStructType": {
      "properties": {
        "fields": {
          "items": {
            "$ref": "#/$defs/AstStructField"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "AstType": {
      "properties": {
        "kind": {
          "type": "string"
        },
        "nullable": {
          "type": "boolean"
        },
        "default": true,
        "disjunction": {
          "$ref": "#/$defs/AstDisjunctionType"
        },
        "array": {
          "$ref": "#/$defs/AstArrayType"
        },
        "enum": {
          "$ref": "#/$defs/AstEnumType"
        },
        "map": {
          "$ref": "#/$defs/AstMapType"
        },
        "struct": {
          "$ref": "#/$defs/AstStructType"
        },
        "ref": {
          "$ref": "#/$defs/AstRefType"
        },
        "scalar": {
          "$ref": "#/$defs/AstScalarType"
        },
        "intersection": {
          "$ref": "#/$defs/AstIntersectionType"
        },
        "composable_slot": {
          "$ref": "#/$defs/AstComposableSlotType"
        },
        "hints": {
          "$ref": "#/$defs/AstJenniesHints"
        },
        "passestrail": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Struct representing every type defined by the IR."
    },
    "AstTypeConstraint": {
      "properties": {
        "op": {
          "type": "string"
        },
        "args": {
          "items": true,
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "AstTypes": {
      "items": {
        "$ref": "#/$defs/AstType"
      },
      "type": "array"
    },
    "VeneersAssignment": {
      "properties": {
        "path": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "value": {
          "$ref": "#/$defs/AstAssignmentValue"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "VeneersOption": {
      "properties": {
        "name": {
          "type": "string"
        },
        "assignments": {
          "items": {
            "$ref": "#/$defs/VeneersAssignment"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlAddAssignment": {
      "properties": {
        "by_name": {
          "type": "string",
          "description": "objectName.optionName"
        },
        "by_builder": {
          "type": "string",
          "description": "builderName.optionName\nTODO: ByName should be called ByObject\nand ByBuilder should be called ByName"
        },
        "by_names": {
          "$ref": "#/$defs/YamlByNamesSelector"
        },
        "assignment": {
          "$ref": "#/$defs/VeneersAssignment"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlAddOption": {
      "properties": {
        "by_object": {
          "type": "string"
        },
        "by_name": {
          "type": "string"
        },
        "generated_from_disjunction": {
          "type": "boolean",
          "description": "noop?"
        },
        "option": {
          "$ref": "#/$defs/VeneersOption"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlArrayToAppend": {
      "properties": {
        "by_name": {
          "type": "string",
          "description": "objectName.optionName"
        },
        "by_builder": {
          "type": "string",
          "description": "builderName.optionName\nTODO: ByName should be called ByObject\nand ByBuilder should be called ByName"
        },
        "by_names": {
          "$ref": "#/$defs/YamlByNamesSelector"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlBuilderRule": {
      "properties": {
        "omit": {
          "$ref": "#/$defs/YamlBuilderSelector"
        },
        "rename": {
          "$ref": "#/$defs/YamlRenameBuilder"
        },
        "merge_into": {
          "$ref": "#/$defs/YamlMergeInto"
        },
        "compose_dashboard_panel": {
          "$ref": "#/$defs/YamlComposeDashboardPanel"
        },
        "properties": {
          "$ref": "#/$defs/YamlProperties"
        },
        "duplicate": {
          "$ref": "#/$defs/YamlDuplicate"
        },
        "initialize": {
          "$ref": "#/$defs/YamlInitialize"
        },
        "promote_options_to_constructor": {
          "$ref": "#/$defs/YamlPromoteOptsToConstructor"
        },
        "add_option": {
          "$ref": "#/$defs/YamlAddOption"
        },
        "default_to_constant": {
          "$ref": "#/$defs/YamlDefaultToConstant"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlBuilderSelector": {
      "properties": {
        "by_object": {
          "type": "string"
        },
        "by_name": {
          "type": "string"
        },
        "generated_from_disjunction": {
          "type": "boolean",
          "description": "noop?"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlByNamesSelector": {
      "properties": {
        "object": {
          "type": "string"
        },
        "options": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlComposeDashboardPanel": {
      "properties": {
        "panel_builder_name": {
          "type": "string"
        },
        "exclude_panel_options": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlDefaultToConstant": {
      "properties": {
        "by_object": {
          "type": "string"
        },
        "by_name": {
          "type": "string"
        },
        "generated_from_disjunction": {
          "type": "boolean",
          "description": "noop?"
        },
        "options": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlDisjunctionAsOptions": {
      "properties": {
        "by_name": {
          "type": "string",
          "description": "objectName.optionName"
        },
        "by_builder": {
          "type": "string",
          "description": "builderName.optionName\nTODO: ByName should be called ByObject\nand ByBuilder should be called ByName"
        },
        "by_names": {
          "$ref": "#/$defs/YamlByNamesSelector"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlDuplicate": {
      "properties": {
        "by_object": {
          "type": "string"
        },
        "by_name": {
          "type": "string"
        },
        "generated_from_disjunction": {
          "type": "boolean",
          "description": "noop?"
        },
        "as": {
          "type": "string"
        },
        "exclude_options": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlDuplicateOption": {
      "properties": {
        "by_name": {
          "type": "string",
          "description": "objectName.optionName"
        },
        "by_builder": {
          "type": "string",
          "description": "builderName.optionName\nTODO: ByName should be called ByObject\nand ByBuilder should be called ByName"
        },
        "by_names": {
          "$ref": "#/$defs/YamlByNamesSelector"
        },
        "as": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlInitialization": {
      "properties": {
        "property": {
          "type": "string"
        },
        "value": true
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlInitialize": {
      "properties": {
        "by_object": {
          "type": "string"
        },
        "by_name": {
          "type": "string"
        },
        "generated_from_disjunction": {
          "type": "boolean",
          "description": "noop?"
        },
        "set": {
          "items": {
            "$ref": "#/$defs/YamlInitialization"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlMergeInto": {
      "properties": {
        "destination": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "under_path": {
          "type": "string"
        },
        "exclude_options": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "rename_options": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlOptionRule": {
      "properties": {
        "omit": {
          "$ref": "#/$defs/YamlOptionSelector"
        },
        "rename": {
          "$ref": "#/$defs/YamlRenameOption"
        },
        "rename_arguments": {
          "$ref": "#/$defs/YamlRenameArguments"
        },
        "unfold_boolean": {
          "$ref": "#/$defs/YamlUnfoldBoolean"
        },
        "struct_fields_as_arguments": {
          "$ref": "#/$defs/YamlStructFieldsAsArguments"
        },
        "struct_fields_as_options": {
          "$ref": "#/$defs/YamlStructFieldsAsOptions"
        },
        "array_to_append": {
          "$ref": "#/$defs/YamlArrayToAppend"
        },
        "disjunction_as_options": {
          "$ref": "#/$defs/YamlDisjunctionAsOptions"
        },
        "duplicate": {
          "$ref": "#/$defs/YamlDuplicateOption"
        },
        "add_assignment": {
          "$ref": "#/$defs/YamlAddAssignment"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlOptionSelector": {
      "properties": {
        "by_name": {
          "type": "string",
          "description": "objectName.optionName"
        },
        "by_builder": {
          "type": "string",
          "description": "builderName.optionName\nTODO: ByName should be called ByObject\nand ByBuilder should be called ByName"
        },
        "by_names": {
          "$ref": "#/$defs/YamlByNamesSelector"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlPromoteOptsToConstructor": {
      "properties": {
        "by_object": {
          "type": "string"
        },
        "by_name": {
          "type": "string"
        },
        "generated_from_disjunction": {
          "type": "boolean",
          "description": "noop?"
        },
        "options": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlProperties": {
      "properties": {
        "by_object": {
          "type": "string"
        },
        "by_name": {
          "type": "string"
        },
        "generated_from_disjunction": {
          "type": "boolean",
          "description": "noop?"
        },
        "set": {
          "items": {
            "$ref": "#/$defs/AstStructField"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlRenameArguments": {
      "properties": {
        "by_name": {
          "type": "string",
          "description": "objectName.optionName"
        },
        "by_builder": {
          "type": "string",
          "description": "builderName.optionName\nTODO: ByName should be called ByObject\nand ByBuilder should be called ByName"
        },
        "by_names": {
          "$ref": "#/$defs/YamlByNamesSelector"
        },
        "as": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlRenameBuilder": {
      "properties": {
        "by_object": {
          "type": "string"
        },
        "by_name": {
          "type": "string"
        },
        "generated_from_disjunction": {
          "type": "boolean",
          "description": "noop?"
        },
        "as": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlRenameOption": {
      "properties": {
        "by_name": {
          "type": "string",
          "description": "objectName.optionName"
        },
        "by_builder": {
          "type": "string",
          "description": "builderName.optionName\nTODO: ByName should be called ByObject\nand ByBuilder should be called ByName"
        },
        "by_names": {
          "$ref": "#/$defs/YamlByNamesSelector"
        },
        "as": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlStructFieldsAsArguments": {
      "properties": {
        "by_name": {
          "type": "string",
          "description": "objectName.optionName"
        },
        "by_builder": {
          "type": "string",
          "description": "builderName.optionName\nTODO: ByName should be called ByObject\nand ByBuilder should be called ByName"
        },
        "by_names": {
          "$ref": "#/$defs/YamlByNamesSelector"
        },
        "fields": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlStructFieldsAsOptions": {
      "properties": {
        "by_name": {
          "type": "string",
          "description": "objectName.optionName"
        },
        "by_builder": {
          "type": "string",
          "description": "builderName.optionName\nTODO: ByName should be called ByObject\nand ByBuilder should be called ByName"
        },
        "by_names": {
          "$ref": "#/$defs/YamlByNamesSelector"
        },
        "fields": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlUnfoldBoolean": {
      "properties": {
        "by_name": {
          "type": "string",
          "description": "objectName.optionName"
        },
        "by_builder": {
          "type": "string",
          "description": "builderName.optionName\nTODO: ByName should be called ByObject\nand ByBuilder should be called ByName"
        },
        "by_names": {
          "$ref": "#/$defs/YamlByNamesSelector"
        },
        "true_as": {
          "type": "string"
        },
        "false_as": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "YamlVeneers": {
      "properties": {
        "language": {
          "type": "string"
        },
        "package": {
          "type": "string"
        },
        "builders": {
          "items": {
            "$ref": "#/$defs/YamlBuilderRule"
          },
          "type": "array"
        },
        "options": {
          "items": {
            "$ref": "#/$defs/YamlOptionRule"
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    }
  }
}