# Basic builders with references across packages.
-- builders_context.json --
{
  "Schemas": [
    {
      "Package": "some_pkg",
      "Metadata": {},
      "Objects": [
        {
          "Name": "Person",
          "Type": {
            "Kind": "struct",
            "Nullable": false,
            "Struct": {
              "Fields": [
                {
                  "Name": "name",
                  "Type": {
                    "Kind": "ref",
                    "Nullable": false,
                    "Ref": {
                      "ReferredPkg": "other_pkg",
                      "ReferredType": "Name"
                    }
                  },
                  "Required": true
                }
              ]
            }
          },
          "SelfRef": {
            "ReferredPkg": "some_pkg",
            "ReferredType": "Person"
          }
        }
      ]
    },
    {
      "Package": "other_pkg",
      "Metadata": {},
      "Objects": [
        {
          "Name": "Name",
          "Type": {
            "Kind": "struct",
            "Nullable": false,
            "Struct": {
              "Fields": [
                {
                  "Name": "first_name",
                  "Type": {
                    "Kind": "scalar",
                    "Nullable": false,
                    "Scalar": {
                      "ScalarKind": "string"
                    }
                  },
                  "Required": true
                },
                {
                  "Name": "last_name",
                  "Type": {
                    "Kind": "scalar",
                    "Nullable": false,
                    "Scalar": {
                        "ScalarKind": "string"
                    }
                  },
                  "Required": true
                }
              ]
            }
          },
          "SelfRef": {
            "ReferredPkg": "other_pkg",
            "ReferredType": "Name"
          }
        }
      ]
    }
  ],
  "Builders": [
    {
      "Schema": {
        "Package": "some_pkg",
        "Metadata": {},
        "Objects": [
          {
            "Name": "Person",
            "Type": {
              "Kind": "struct",
              "Nullable": false,
              "Struct": {
                "Fields": [
                  {
                    "Name": "name",
                    "Type": {
                      "Kind": "ref",
                      "Nullable": false,
                      "Ref": {
                        "ReferredPkg": "other_pkg",
                        "ReferredType": "Name"
                      }
                    },
                    "Required": true
                  }
                ]
              }
            },
            "SelfRef": {
              "ReferredPkg": "some_pkg",
              "ReferredType": "Person"
            }
          }
        ]
      },
      "For": {
        "Name": "Person",
        "Type": {
          "Kind": "struct",
          "Nullable": false,
          "Struct": {
            "Fields": [
              {
                "Name": "name",
                "Type": {
                  "Kind": "ref",
                  "Nullable": false,
                  "Ref": {
                    "ReferredPkg": "other_pkg",
                    "ReferredType": "Name"
                  }
                },
                "Required": true
              }
            ]
          }
        },
        "SelfRef": {
          "ReferredPkg": "some_pkg",
          "ReferredType": "Person"
        }
      },
      "Package": "some_pkg",
      "Name": "Person",
      "Options": [
        {
          "Name": "name",
          "Args": [
            {
              "Name": "name",
              "Type": {
                "Kind": "ref",
                "Nullable": false,
                "Ref": {
                  "ReferredPkg": "other_pkg",
                  "ReferredType": "Name"
                }
              }
            }
          ],
          "Assignments": [
            {
              "Path": [
                {
                  "Identifier": "name",
                  "Type": {
                    "Ref": {
                      "ReferredPkg": "other_pkg",
                      "ReferredType": "Name"
                    }
                  }
                }
              ],
              "Value": {
                "Argument": {
                  "Name": "name",
                  "Type": {
                    "Kind": "ref",
                    "Nullable": false,
                    "Ref": {
                      "ReferredPkg": "other_pkg",
                      "ReferredType": "Name"
                    }
                  }
                }
              },
              "Method": "direct"
            }
          ],
          "IsConstructorArg": false
        }
      ]
    }
  ]
}

-- out/jennies/TypescriptBuilder --
== src/some_pkg/person_builder_gen.ts
import * as cog from '../cog';
import * as some_pkg from '../some_pkg';
import * as other_pkg from '../other_pkg';

export class PersonBuilder implements cog.Builder<some_pkg.Person> {
    private readonly internal: some_pkg.Person;

    constructor() {
        this.internal = some_pkg.defaultPerson();
    }

    build(): some_pkg.Person {
        return this.internal;
    }

    name(name: other_pkg.Name): this {
        this.internal.name = name;
        return this;
    }
}
-- out/jennies/GoBuilder --
== some_pkg/person_builder_gen.go
package some_pkg

import (
	cog "github.com/grafana/cog/generated/cog"
	other_pkg "github.com/grafana/cog/generated/other_pkg"
)

var _ cog.Builder[Person] = (*PersonBuilder)(nil)

type PersonBuilder struct {
    internal *Person
    errors map[string]cog.BuildErrors
}

func NewPersonBuilder() *PersonBuilder {
	resource := &Person{}
	builder := &PersonBuilder{
		internal: resource,
		errors: make(map[string]cog.BuildErrors),
	}

	builder.applyDefaults()

	return builder
}

func (builder *PersonBuilder) Build() (Person, error) {
	var errs cog.BuildErrors

	for _, err := range builder.errors {
		errs = append(errs, cog.MakeBuildErrors("Person", err)...)
	}

	if len(errs) != 0 {
		return Person{}, errs
	}

	return *builder.internal, nil
}

func (builder *PersonBuilder) Name(name other_pkg.Name) *PersonBuilder {
    builder.internal.Name = name

    return builder
}

func (builder *PersonBuilder) applyDefaults() {
}
