# Foreign builder.
# ie: a builder that lives in a package but builds a type from a different package.
-- builders_context.json --
{
  "Schemas": [
    {
      "Package": "some_pkg",
      "Metadata": {},
      "Objects": [
        {
          "Name": "SomeStruct",
          "Type": {
            "Kind": "struct",
            "Nullable": false,
            "Struct": {
              "Fields": [
                {
                  "Name": "title",
                  "Type": {
                    "Kind": "scalar",
                    "Nullable": false,
                    "Scalar": {
                      "ScalarKind": "string"
                    }
                  },
                  "Required": true
                }
              ]
            }
          },
          "SelfRef": {
            "ReferredPkg": "some_pkg",
            "ReferredType": "SomeStruct"
          }
        }
      ]
    }
  ],
  "Builders": [
    {
      "Schema": {
        "Package": "some_pkg",
        "Metadata": {},
        "Objects": [
          {
            "Name": "SomeStruct",
            "Type": {
              "Kind": "struct",
              "Nullable": false,
              "Struct": {
                "Fields": [
                  {
                    "Name": "title",
                    "Type": {
                      "Kind": "scalar",
                      "Nullable": false,
                      "Scalar": {
                        "ScalarKind": "string"
                      }
                    },
                    "Required": true
                  }
                ]
              }
            },
            "SelfRef": {
              "ReferredPkg": "some_pkg",
              "ReferredType": "SomeStruct"
            }
          }
        ]
      },
      "For": {
        "Name": "SomeStruct",
        "Type": {
          "Kind": "struct",
          "Nullable": false,
          "Struct": {
            "Fields": [
              {
                "Name": "title",
                "Type": {
                  "Kind": "scalar",
                  "Nullable": false,
                  "Scalar": {
                    "ScalarKind": "string"
                  }
                },
                "Required": true
              }
            ]
          }
        },
        "SelfRef": {
          "ReferredPkg": "some_pkg",
          "ReferredType": "SomeStruct"
        }
      },
      "Package": "builder_pkg",
      "Name": "SomeNiceBuilder",
      "Options": [
        {
          "Name": "title",
          "Args": [
            {
              "Name": "title",
              "Type": {
                "Kind": "scalar",
                "Nullable": false,
                "Scalar": {
                  "ScalarKind": "string"
                }
              }
            }
          ],
          "Assignments": [
            {
              "Path": [
                {
                  "Identifier": "title",
                  "Type": {
                    "Kind": "scalar",
                    "Nullable": false,
                    "Scalar": {
                      "ScalarKind": "string"
                    }
                  }
                }
              ],
              "Value": {
                "Argument": {
                  "Name": "title",
                  "Type": {
                    "Kind": "scalar",
                    "Nullable": false,
                    "Scalar": {
                      "ScalarKind": "string"
                    }
                  }
                }
              },
              "Method": "direct"
            }
          ],
          "IsConstructorArg": false
        }
      ]
    }
  ]
}

-- out/jennies/TypescriptBuilder --
== builder_pkg/somestruct_builder_gen.ts
import * as cog from '../cog';
import * as some_pkg from '../some_pkg';

export class SomeNiceBuilderBuilder implements cog.Builder<some_pkg.SomeStruct> {
    private readonly internal: some_pkg.SomeStruct;

    constructor() {
        this.internal = some_pkg.defaultSomeStruct();
    }

    build(): some_pkg.SomeStruct {
        return this.internal;
    }

    title(title: string): this {
        this.internal.title = title;
        return this;
    }
}
-- out/jennies/GoBuilder --
== builder_pkg/somestruct_builder_gen.go
package builder_pkg

import (
	cog "github.com/grafana/cog/generated/cog"
	some_pkg "github.com/grafana/cog/generated/some_pkg"
)

var _ cog.Builder[some_pkg.SomeStruct] = (*SomeNiceBuilderBuilder)(nil)

type SomeNiceBuilderBuilder struct {
    internal *some_pkg.SomeStruct
    errors map[string]cog.BuildErrors
}

func NewSomeNiceBuilderBuilder() *SomeNiceBuilderBuilder {
	resource := &some_pkg.SomeStruct{}
	builder := &SomeNiceBuilderBuilder{
		internal: resource,
		errors: make(map[string]cog.BuildErrors),
	}

	builder.applyDefaults()

	return builder
}

func (builder *SomeNiceBuilderBuilder) Build() (some_pkg.SomeStruct, error) {
	var errs cog.BuildErrors

	for _, err := range builder.errors {
		errs = append(errs, cog.MakeBuildErrors("SomeNiceBuilder", err)...)
	}

	if len(errs) != 0 {
		return some_pkg.SomeStruct{}, errs
	}

	return *builder.internal, nil
}

func (builder *SomeNiceBuilderBuilder) Title(title string) *SomeNiceBuilderBuilder {
    builder.internal.Title = title

    return builder
}

func (builder *SomeNiceBuilderBuilder) applyDefaults() {
}
