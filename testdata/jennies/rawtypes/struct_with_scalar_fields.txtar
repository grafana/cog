# Basic struct with scalar fields, all required.
-- ir.json --
{
    "Package": "basic",
    "Objects": [
        {
            "Name": "SomeStruct",
            "Comments": ["This", "is", "a", "comment"],
            "Type": {
                "Kind": "struct",
                "Struct": {
                    "Fields": [
                        {
                            "Name": "FieldAny",
                            "Required": true,
                            "Comments": ["Anything can go in there.", "Really, anything."],
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "any"}
                            }
                        },
                        {
                            "Name": "FieldBool",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "bool"}
                            }
                        },

                        {
                            "Name": "FieldBytes",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "bytes"}
                            }
                        },
                        {
                            "Name": "FieldString",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "string"}
                            }
                        },
                        {
                            "Name": "FieldStringWithConstantValue",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "string", "Value": "auto"}
                            }
                        },

                        {
                            "Name": "FieldFloat32",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "float32"}
                            }
                        },
                        {
                            "Name": "FieldFloat64",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "float64"}
                            }
                        },

                        {
                            "Name": "FieldUint8",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "uint8"}
                            }
                        },
                        {
                            "Name": "FieldUint16",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "uint16"}
                            }
                        },
                        {
                            "Name": "FieldUint32",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "uint32"}
                            }
                        },
                        {
                            "Name": "FieldUint64",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "uint64"}
                            }
                        },

                        {
                            "Name": "FieldInt8",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "int8"}
                            }
                        },
                        {
                            "Name": "FieldInt16",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "int16"}
                            }
                        },
                        {
                            "Name": "FieldInt32",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "int32"}
                            }
                        },
                        {
                            "Name": "FieldInt64",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "int64"}
                            }
                        }
                    ]
                }
            }
        }
    ]
}
-- out/jennies/TypescriptRawTypes --
== src/basic/types_gen.ts
// This
// is
// a
// comment
export interface SomeStruct {
	// Anything can go in there.
	// Really, anything.
	FieldAny: any;
	FieldBool: boolean;
	FieldBytes: string;
	FieldString: string;
	FieldStringWithConstantValue: "auto";
	FieldFloat32: number;
	FieldFloat64: number;
	FieldUint8: number;
	FieldUint16: number;
	FieldUint32: number;
	FieldUint64: number;
	FieldInt8: number;
	FieldInt16: number;
	FieldInt32: number;
	FieldInt64: number;
}

export const defaultSomeStruct = (): SomeStruct => ({
	FieldAny: {},
	FieldBool: false,
	FieldBytes: "",
	FieldString: "",
	FieldStringWithConstantValue: "auto",
	FieldFloat32: 0,
	FieldFloat64: 0,
	FieldUint8: 0,
	FieldUint16: 0,
	FieldUint32: 0,
	FieldUint64: 0,
	FieldInt8: 0,
	FieldInt16: 0,
	FieldInt32: 0,
	FieldInt64: 0,
});

-- out/jennies/GoRawTypes --
== basic/types_gen.go
package basic

// This
// is
// a
// comment
type SomeStruct struct {
	// Anything can go in there.
// Really, anything.
FieldAny any `json:"FieldAny"`
	FieldBool bool `json:"FieldBool"`
	FieldBytes bytes `json:"FieldBytes"`
	FieldString string `json:"FieldString"`
	FieldStringWithConstantValue string `json:"FieldStringWithConstantValue"`
	FieldFloat32 float32 `json:"FieldFloat32"`
	FieldFloat64 float64 `json:"FieldFloat64"`
	FieldUint8 uint8 `json:"FieldUint8"`
	FieldUint16 uint16 `json:"FieldUint16"`
	FieldUint32 uint32 `json:"FieldUint32"`
	FieldUint64 uint64 `json:"FieldUint64"`
	FieldInt8 int8 `json:"FieldInt8"`
	FieldInt16 int16 `json:"FieldInt16"`
	FieldInt32 int32 `json:"FieldInt32"`
	FieldInt64 int64 `json:"FieldInt64"`
}

-- out/jennies/PythonRawTypes --
== models/basic.py
import typing


class SomeStruct:
    """
    This
    is
    a
    comment
    """

    # Anything can go in there.
    # Really, anything.
    FieldAny: object
    FieldBool: bool
    FieldBytes: bytes
    FieldString: str
    FieldStringWithConstantValue: typing.Literal["auto"]
    FieldFloat32: float
    FieldFloat64: float
    FieldUint8: int
    FieldUint16: int
    FieldUint32: int
    FieldUint64: int
    FieldInt8: int
    FieldInt16: int
    FieldInt32: int
    FieldInt64: int
