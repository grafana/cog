# More complex struct with complex fields, all required.
-- ir.json --
{
    "Package": "struct_complex_fields",
    "Objects": [
        {
            "Name": "SomeStruct",
            "SelfRef": {"ReferredPkg": "struct_complex_fields", "ReferredType": "SomeStruct"},
            "Comments": ["This struct does things."],
            "Type": {
                "Kind": "struct",
                "Struct": {
                    "Fields": [
                        {
                            "Name": "FieldRef",
                            "Required": true,
                            "Type": {
                                "Kind": "ref",
                                "Ref": {"ReferredPkg": "struct_complex_fields", "ReferredType": "SomeOtherStruct"}
                            }
                        },
                        {
                            "Name": "FieldDisjunctionOfScalars",
                            "Required": true,
                            "Type": {
                                "Kind": "disjunction",
                                "Disjunction": {
                                    "Branches": [
                                        {
                                            "Kind": "scalar",
                                            "Scalar": {"ScalarKind": "string"}
                                        },
                                        {
                                            "Kind": "scalar",
                                            "Scalar": {"ScalarKind": "bool"}
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "Name": "FieldMixedDisjunction",
                            "Required": true,
                            "Type": {
                                "Kind": "disjunction",
                                "Disjunction": {
                                    "Branches": [
                                        {
                                            "Kind": "scalar",
                                            "Scalar": {"ScalarKind": "string"}
                                        },
                                        {
                                            "Kind": "ref",
                                            "Ref": {"ReferredPkg": "struct_complex_fields", "ReferredType": "SomeOtherStruct"}
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "Name": "FieldDisjunctionWithNull",
                            "Required": true,
                            "Type": {
                                "Kind": "disjunction",
                                "Disjunction": {
                                    "Branches": [
                                        {
                                            "Kind": "scalar",
                                            "Scalar": {"ScalarKind": "string"}
                                        },
                                        {
                                            "Kind": "scalar",
                                            "Scalar": {"ScalarKind": "null"}
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "Name": "Operator",
                            "Required": true,
                            "Type": {
                                "Kind": "enum",
                                "Enum": {
                                    "Values": [
                                        {
                                            "Name": "GreaterThan",
                                            "Type": {
                                                "Kind": "scalar",
                                                "Scalar": {"ScalarKind": "string"}
                                            },
                                            "Value": ">"
                                        },
                                        {
                                            "Name": "LessThan",
                                            "Type": {
                                                "Kind": "scalar",
                                                "Scalar": {"ScalarKind": "string"}
                                            },
                                            "Value": "<"
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "Name": "FieldArrayOfStrings",
                            "Required": true,
                            "Type": {
                                "Kind": "array",
                                "Array": {
                                    "ValueType": {
                                        "Kind": "scalar",
                                        "Scalar": {"ScalarKind": "string"}
                                    }
                                }
                            }
                        },
                        {
                            "Name": "FieldMapOfStringToString",
                            "Required": true,
                            "Type": {
                                "Kind": "map",
                                "Map": {
                                    "IndexType": {
                                        "Kind": "scalar",
                                        "Scalar": {"ScalarKind": "string"}
                                    },
                                    "ValueType": {
                                        "Kind": "scalar",
                                        "Scalar": {"ScalarKind": "string"}
                                    }
                                }
                            }
                        },
                        {
                            "Name": "FieldAnonymousStruct",
                            "Required": true,
                            "Type": {
                                "Kind": "struct",
                                "Struct": {
                                    "Fields": [
                                        {
                                            "Name": "FieldAny",
                                            "Required": true,
                                            "Type": {
                                                "Kind": "scalar",
                                                "Scalar": {"ScalarKind": "any"}
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            }
        },

        {
            "Name": "SomeOtherStruct",
            "SelfRef": {"ReferredPkg": "struct_complex_fields", "ReferredType": "SomeOtherStruct"},
            "Type": {
                "Kind": "struct",
                "Struct": {
                    "Fields": [
                        {
                            "Name": "FieldAny",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "any"}
                            }
                        }
                    ]
                }
            }
        }
    ]
}
-- out/jennies/TypescriptRawTypes --
== src/struct_complex_fields/types_gen.ts
// This struct does things.
export interface SomeStruct {
	FieldRef: SomeOtherStruct;
	FieldDisjunctionOfScalars: string | boolean;
	FieldMixedDisjunction: string | SomeOtherStruct;
	FieldDisjunctionWithNull: string | null;
	Operator: ">" | "<";
	FieldArrayOfStrings: string[];
	FieldMapOfStringToString: Record<string, string>;
	FieldAnonymousStruct: {
		FieldAny: any;
	};
}

export const defaultSomeStruct = (): SomeStruct => ({
	FieldRef: defaultSomeOtherStruct(),
	FieldDisjunctionOfScalars: "",
	FieldMixedDisjunction: "",
	FieldDisjunctionWithNull: "",
	Operator: ">",
	FieldArrayOfStrings: [],
	FieldMapOfStringToString: {},
	FieldAnonymousStruct: {
	FieldAny: {},
},
});

export interface SomeOtherStruct {
	FieldAny: any;
}

export const defaultSomeOtherStruct = (): SomeOtherStruct => ({
	FieldAny: {},
});

-- out/jennies/GoRawTypes --
== struct_complex_fields/types_gen.go
package struct_complex_fields

// This struct does things.
type SomeStruct struct {
	FieldRef SomeOtherStruct `json:"FieldRef"`
	FieldDisjunctionOfScalars StringOrBool `json:"FieldDisjunctionOfScalars"`
	FieldMixedDisjunction StringOrSomeOtherStruct `json:"FieldMixedDisjunction"`
	FieldDisjunctionWithNull *string `json:"FieldDisjunctionWithNull"`
	Operator SomeStructOperator `json:"Operator"`
	FieldArrayOfStrings []string `json:"FieldArrayOfStrings"`
	FieldMapOfStringToString map[string]string `json:"FieldMapOfStringToString"`
	FieldAnonymousStruct struct {
	FieldAny any `json:"FieldAny"`
} `json:"FieldAnonymousStruct"`
}

type SomeOtherStruct struct {
	FieldAny any `json:"FieldAny"`
}

type SomeStructOperator string
const (
	SomeStructOperatorGreaterThan SomeStructOperator = ">"
	SomeStructOperatorLessThan SomeStructOperator = "<"
)


type StringOrBool struct {
	String *string `json:"String,omitempty"`
	Bool *bool `json:"Bool,omitempty"`
}

type StringOrSomeOtherStruct struct {
	String *string `json:"String,omitempty"`
	SomeOtherStruct *SomeOtherStruct `json:"SomeOtherStruct,omitempty"`
}

-- out/jennies/GoJSONMarshalling --
== struct_complex_fields/types_json_marshalling_gen.go
package struct_complex_fields
func (resource *StringOrBool) MarshalJSON() ([]byte, error) {
	if resource.String != nil {
		return json.Marshal(resource.String)
	}

	if resource.Bool != nil {
		return json.Marshal(resource.Bool)
	}

	return nil, nil
}

func (resource *StringOrBool) UnmarshalJSON(raw []byte) error {
	if raw == nil {
		return nil
	}

	var errList []error

	// String
	var String string
	if err := json.Unmarshal(raw, &String); err != nil {
		errList = append(errList, err)
		resource.String = nil
	} else {
		resource.String = &String
		return nil
	}

	// Bool
	var Bool bool
	if err := json.Unmarshal(raw, &Bool); err != nil {
		errList = append(errList, err)
		resource.Bool = nil
	} else {
		resource.Bool = &Bool
		return nil
	}

	return errors.Join(errList...)
}

-- out/jennies/PythonRawTypes --
== models/struct_complex_fields.py
import typing


class StructComplexFieldsSomeStructFieldAnonymousStruct:
    field_any: object

    def __init__(self, field_any: object = None):
        self.field_any = field_any

    def to_json(self) -> dict[str, object]:
        payload: dict[str, object] = {
            "FieldAny": self.field_any,
        }
        return payload


class SomeStruct:
    """
    This struct does things.
    """

    field_ref: 'SomeOtherStruct'
    field_disjunction_of_scalars: typing.Union[str, bool]
    field_mixed_disjunction: typing.Union[str, 'SomeOtherStruct']
    field_disjunction_with_null: typing.Optional[str]
    operator: typing.Literal[">", "<"]
    field_array_of_strings: list[str]
    field_map_of_string_to_string: dict[str, str]
    field_anonymous_struct: 'StructComplexFieldsSomeStructFieldAnonymousStruct'

    def __init__(self, field_ref: typing.Optional['SomeOtherStruct'] = None, field_disjunction_of_scalars: typing.Union[str, bool] = "", field_mixed_disjunction: typing.Union[str, 'SomeOtherStruct'] = "", field_disjunction_with_null: typing.Optional[str] = None, operator: typing.Optional[typing.Literal[">", "<"]] = None, field_array_of_strings: typing.Optional[list[str]] = None, field_map_of_string_to_string: typing.Optional[dict[str, str]] = None, field_anonymous_struct: typing.Optional['StructComplexFieldsSomeStructFieldAnonymousStruct'] = None):
        self.field_ref = field_ref if field_ref is not None else SomeOtherStruct()
        self.field_disjunction_of_scalars = field_disjunction_of_scalars
        self.field_mixed_disjunction = field_mixed_disjunction
        self.field_disjunction_with_null = field_disjunction_with_null
        self.operator = operator if operator is not None else ">"
        self.field_array_of_strings = field_array_of_strings if field_array_of_strings is not None else []
        self.field_map_of_string_to_string = field_map_of_string_to_string if field_map_of_string_to_string is not None else {}
        self.field_anonymous_struct = field_anonymous_struct if field_anonymous_struct is not None else StructComplexFieldsSomeStructFieldAnonymousStruct()

    def to_json(self) -> dict[str, object]:
        payload: dict[str, object] = {
            "FieldRef": None if self.field_ref is None else self.field_ref.to_json(),
            "FieldDisjunctionOfScalars": self.field_disjunction_of_scalars,
            "FieldMixedDisjunction": self.field_mixed_disjunction,
            "FieldDisjunctionWithNull": self.field_disjunction_with_null,
            "Operator": self.operator,
            "FieldArrayOfStrings": self.field_array_of_strings,
            "FieldMapOfStringToString": self.field_map_of_string_to_string,
            "FieldAnonymousStruct": None if self.field_anonymous_struct is None else self.field_anonymous_struct.to_json(),
        }
        return payload


class SomeOtherStruct:
    field_any: object

    def __init__(self, field_any: object = None):
        self.field_any = field_any

    def to_json(self) -> dict[str, object]:
        payload: dict[str, object] = {
            "FieldAny": self.field_any,
        }
        return payload
