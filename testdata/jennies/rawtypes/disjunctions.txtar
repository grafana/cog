# Disjunctions
-- ir.json --
{
    "Package": "disjunctions",
    "Objects": [
        {
            "Name": "RefreshRate",
            "Comments": ["Refresh rate or disabled."],
            "Type": {
                "Kind": "disjunction",
                "Disjunction": {
                    "Branches": [
                        {
                            "Kind": "scalar",
                            "Scalar": {"ScalarKind": "string"}
                        },
                        {
                            "Kind": "scalar",
                            "Scalar": {"ScalarKind": "bool"}
                        }
                    ]
                }
            }
        },

        {
            "Name": "StringOrNull",
            "Type": {
                "Kind": "disjunction",
                "Disjunction": {
                    "Branches": [
                        {
                            "Kind": "scalar",
                            "Scalar": {"ScalarKind": "string"}
                        },
                        {
                            "Kind": "scalar",
                            "Scalar": {"ScalarKind": "null"}
                        }
                    ]
                }
            }
        },

        {
            "Name": "SomeStruct",
            "Type": {
                "Kind": "struct",
                "Struct": {
                    "Fields": [
                        {
                            "Name": "Type",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "string", "Value": "some-struct"}
                            }
                        },
                        {
                            "Name": "FieldAny",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "any"}
                            }
                        }
                    ]
                }
            }
        },
        {
            "Name": "BoolOrRef",
            "Type": {
                "Kind": "disjunction",
                "Disjunction": {
                    "Branches": [
                        {
                            "Kind": "scalar",
                            "Scalar": {"ScalarKind": "bool"}
                        },
                        {
                            "Kind": "ref",
                            "Ref": {"ReferredPkg": "disjunctions", "ReferredType": "SomeStruct"}
                        }
                    ]
                }
            }
        },
        {
            "Name": "SomeOtherStruct",
            "Type": {
                "Kind": "struct",
                "Struct": {
                    "Fields": [
                        {
                            "Name": "Type",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "string", "Value": "some-other-struct"}
                            }
                        },
                        {
                            "Name": "Foo",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "bytes"}
                            }
                        }
                    ]
                }
            }
        },
        {
            "Name": "YetAnotherStruct",
            "Type": {
                "Kind": "struct",
                "Struct": {
                    "Fields": [
                        {
                            "Name": "Type",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "string", "Value": "yet-another-struct"}
                            }
                        },
                        {
                            "Name": "Bar",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "uint8"}
                            }
                        }
                    ]
                }
            }
        },
        {
            "Name": "SeveralRefs",
            "Type": {
                "Kind": "disjunction",
                "Disjunction": {
                    "Branches": [
                        {
                            "Kind": "ref",
                            "Ref": {"ReferredPkg": "disjunctions", "ReferredType": "SomeStruct"}
                        },
                        {
                            "Kind": "ref",
                            "Ref": {"ReferredPkg": "disjunctions", "ReferredType": "SomeOtherStruct"}
                        },
                        {
                            "Kind": "ref",
                            "Ref": {"ReferredPkg": "disjunctions", "ReferredType": "YetAnotherStruct"}
                        }
                    ]
                }
            }
        }
    ]
}
-- out/jennies/TypescriptRawTypes --
== disjunctions/types_gen.ts
// Refresh rate or disabled.
export type RefreshRate = string | boolean;

export const defaultRefreshRate = (): RefreshRate => ("");

export type StringOrNull = string | null;

export const defaultStringOrNull = (): StringOrNull => ("");

export interface SomeStruct {
	Type: "some-struct";
	FieldAny: any;
}

export const defaultSomeStruct = (): SomeStruct => ({
	Type: "some-struct",
	FieldAny: {},
});

export type BoolOrRef = boolean | SomeStruct;

export const defaultBoolOrRef = (): BoolOrRef => (false);

export interface SomeOtherStruct {
	Type: "some-other-struct";
	Foo: string;
}

export const defaultSomeOtherStruct = (): SomeOtherStruct => ({
	Type: "some-other-struct",
	Foo: "",
});

export interface YetAnotherStruct {
	Type: "yet-another-struct";
	Bar: number;
}

export const defaultYetAnotherStruct = (): YetAnotherStruct => ({
	Type: "yet-another-struct",
	Bar: 0,
});

export type SeveralRefs = SomeStruct | SomeOtherStruct | YetAnotherStruct;

export const defaultSeveralRefs = (): SeveralRefs => (defaultSomeStruct());

-- out/jennies/GoRawTypes --
== disjunctions/types_gen.go
package disjunctions

// Refresh rate or disabled.
type RefreshRate StringOrBool

type StringOrNull *string

type SomeStruct struct {
	Type string `json:"Type"`
	FieldAny any `json:"FieldAny"`
}

type BoolOrRef BoolOrSomeStruct

type SomeOtherStruct struct {
	Type string `json:"Type"`
	Foo bytes `json:"Foo"`
}

type YetAnotherStruct struct {
	Type string `json:"Type"`
	Bar uint8 `json:"Bar"`
}

type SeveralRefs SomeStructOrSomeOtherStructOrYetAnotherStruct

type BoolOrSomeStruct struct {
	Bool *bool `json:"Bool,omitempty"`
	SomeStruct *SomeStruct `json:"SomeStruct,omitempty"`
}

type SomeStructOrSomeOtherStructOrYetAnotherStruct struct {
	SomeStruct *SomeStruct `json:"SomeStruct,omitempty"`
	SomeOtherStruct *SomeOtherStruct `json:"SomeOtherStruct,omitempty"`
	YetAnotherStruct *YetAnotherStruct `json:"YetAnotherStruct,omitempty"`
}

type StringOrBool struct {
	String *string `json:"String,omitempty"`
	Bool *bool `json:"Bool,omitempty"`
}

-- out/jennies/GoJSONMarshalling --
== disjunctions/types_json_marshalling_gen.go
package disjunctions
func (resource *SomeStructOrSomeOtherStructOrYetAnotherStruct) MarshalJSON() ([]byte, error) {
	if resource.SomeStruct != nil {
		return json.Marshal(resource.SomeStruct)
	}
	if resource.SomeOtherStruct != nil {
		return json.Marshal(resource.SomeOtherStruct)
	}
	if resource.YetAnotherStruct != nil {
		return json.Marshal(resource.YetAnotherStruct)
	}

	return nil, nil
}

func (resource *SomeStructOrSomeOtherStructOrYetAnotherStruct) UnmarshalJSON(raw []byte) error {
	if raw == nil {
		return nil
	}

	// FIXME: this is wasteful, we need to find a more efficient way to unmarshal this.
	parsedAsMap := make(map[string]any)
	if err := json.Unmarshal(raw, &parsedAsMap); err != nil {
		return err
	}

	discriminator, found := parsedAsMap["Type"]
	if !found {
		return errors.New("discriminator field 'Type' not found in payload")
	}

	switch discriminator {
	case "some-other-struct":
		var someOtherStruct SomeOtherStruct
		if err := json.Unmarshal(raw, &someOtherStruct); err != nil {
			return err
		}

		resource.SomeOtherStruct = &someOtherStruct
		return nil
	case "some-struct":
		var someStruct SomeStruct
		if err := json.Unmarshal(raw, &someStruct); err != nil {
			return err
		}

		resource.SomeStruct = &someStruct
		return nil
	case "yet-another-struct":
		var yetAnotherStruct YetAnotherStruct
		if err := json.Unmarshal(raw, &yetAnotherStruct); err != nil {
			return err
		}

		resource.YetAnotherStruct = &yetAnotherStruct
		return nil
	}

	return fmt.Errorf("could not unmarshal resource with `Type = %v`", discriminator)
}

func (resource *StringOrBool) MarshalJSON() ([]byte, error) {
	if resource.String != nil {
		return json.Marshal(resource.String)
	}

	if resource.Bool != nil {
		return json.Marshal(resource.Bool)
	}

	return nil, nil
}

func (resource *StringOrBool) UnmarshalJSON(raw []byte) error {
	if raw == nil {
		return nil
	}

	var errList []error

	// String
	var String string
	if err := json.Unmarshal(raw, &String); err != nil {
		errList = append(errList, err)
		resource.String = nil
	} else {
		resource.String = &String
		return nil
	}

	// Bool
	var Bool bool
	if err := json.Unmarshal(raw, &Bool); err != nil {
		errList = append(errList, err)
		resource.Bool = nil
	} else {
		resource.Bool = &Bool
		return nil
	}

	return errors.Join(errList...)
}

