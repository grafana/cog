# Basic struct with optional fields.
-- ir.json --
{
    "Package": "struct_optional_fields",
    "Objects": [
        {
            "Name": "SomeStruct",
            "SelfRef": {"ReferredPkg": "struct_optional_fields", "ReferredType": "SomeStruct"},
            "Type": {
                "Kind": "struct",
                "Struct": {
                    "Fields": [
                        {
                            "Name": "FieldRef",
                            "Required": false,
                            "Type": {
                                "Kind": "ref",
                                "Ref": {"ReferredPkg": "struct_optional_fields", "ReferredType": "SomeOtherStruct"}
                            }
                        },
                        {
                            "Name": "FieldString",
                            "Required": false,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "string"}
                            }
                        },
                        {
                            "Name": "Operator",
                            "Required": false,
                            "Type": {
                                "Kind": "enum",
                                "Enum": {
                                    "Values": [
                                        {
                                            "Name": "GreaterThan",
                                            "Type": {
                                                "Kind": "scalar",
                                                "Scalar": {"ScalarKind": "string"}
                                            },
                                            "Value": ">"
                                        },
                                        {
                                            "Name": "LessThan",
                                            "Type": {
                                                "Kind": "scalar",
                                                "Scalar": {"ScalarKind": "string"}
                                            },
                                            "Value": "<"
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "Name": "FieldArrayOfStrings",
                            "Required": false,
                            "Type": {
                                "Kind": "array",
                                "Array": {
                                    "ValueType": {
                                        "Kind": "scalar",
                                        "Scalar": {"ScalarKind": "string"}
                                    }
                                }
                            }
                        },
                        {
                            "Name": "FieldAnonymousStruct",
                            "Required": false,
                            "Type": {
                                "Kind": "struct",
                                "Struct": {
                                    "Fields": [
                                        {
                                            "Name": "FieldAny",
                                            "Required": true,
                                            "Type": {
                                                "Kind": "scalar",
                                                "Scalar": {"ScalarKind": "any"}
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            }
        },

        {
            "Name": "SomeOtherStruct",
            "SelfRef": {"ReferredPkg": "struct_optional_fields", "ReferredType": "SomeOtherStruct"},
            "Type": {
                "Kind": "struct",
                "Struct": {
                    "Fields": [
                        {
                            "Name": "FieldAny",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "any"}
                            }
                        }
                    ]
                }
            }
        }
    ]
}
-- out/jennies/TypescriptRawTypes --
== src/struct_optional_fields/types_gen.ts
export interface SomeStruct {
	FieldRef?: SomeOtherStruct;
	FieldString?: string;
	Operator?: ">" | "<";
	FieldArrayOfStrings?: string[];
	FieldAnonymousStruct?: {
		FieldAny: any;
	};
}

export const defaultSomeStruct = (): SomeStruct => ({
});

export interface SomeOtherStruct {
	FieldAny: any;
}

export const defaultSomeOtherStruct = (): SomeOtherStruct => ({
	FieldAny: {},
});

-- out/jennies/GoRawTypes --
== struct_optional_fields/types_gen.go
package struct_optional_fields

type SomeStruct struct {
	FieldRef *SomeOtherStruct `json:"FieldRef,omitempty"`
	FieldString *string `json:"FieldString,omitempty"`
	Operator *SomeStructOperator `json:"Operator,omitempty"`
	FieldArrayOfStrings []string `json:"FieldArrayOfStrings,omitempty"`
	FieldAnonymousStruct *struct {
	FieldAny any `json:"FieldAny"`
} `json:"FieldAnonymousStruct,omitempty"`
}

type SomeOtherStruct struct {
	FieldAny any `json:"FieldAny"`
}

type SomeStructOperator string
const (
	SomeStructOperatorGreaterThan SomeStructOperator = ">"
	SomeStructOperatorLessThan SomeStructOperator = "<"
)


-- out/jennies/JavaRawTypes --
== struct_optional_fields/StructOptionalFieldsSomeStructFieldAnonymousStruct.java
package struct_optional_fields;


public class StructOptionalFieldsSomeStructFieldAnonymousStruct {
    public Object FieldAny;
    
}
== struct_optional_fields/SomeStruct.java
package struct_optional_fields;

import java.util.List;

public class SomeStruct {
    public SomeOtherStruct FieldRef;
    public String FieldString;
    public SomeStructOperator Operator;
    public List<String> FieldArrayOfStrings;
    public StructOptionalFieldsSomeStructFieldAnonymousStruct FieldAnonymousStruct;
    
}
== struct_optional_fields/SomeOtherStruct.java
package struct_optional_fields;


public class SomeOtherStruct {
    public Object FieldAny;
    
}
== struct_optional_fields/SomeStructOperator.java
package struct_optional_fields;


public enum SomeStructOperator {
    GREATER_THAN(">"),
    LESS_THAN("<");

    private String value;

    private SomeStructOperator(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }
}
-- out/jennies/PythonRawTypes --
== models/struct_optional_fields.py
import typing


class StructOptionalFieldsSomeStructFieldAnonymousStruct:
    field_any: object

    def __init__(self, field_any: object = None):
        self.field_any = field_any

    def to_json(self) -> dict[str, object]:
        payload: dict[str, object] = {
            "FieldAny": self.field_any,
        }
        return payload


class SomeStruct:
    field_ref: typing.Optional['SomeOtherStruct']
    field_string: typing.Optional[str]
    operator: typing.Optional[typing.Literal[">", "<"]]
    field_array_of_strings: typing.Optional[list[str]]
    field_anonymous_struct: typing.Optional['StructOptionalFieldsSomeStructFieldAnonymousStruct']

    def __init__(self, field_ref: typing.Optional['SomeOtherStruct'] = None, field_string: typing.Optional[str] = None, operator: typing.Optional[typing.Literal[">", "<"]] = None, field_array_of_strings: typing.Optional[list[str]] = None, field_anonymous_struct: typing.Optional['StructOptionalFieldsSomeStructFieldAnonymousStruct'] = None):
        self.field_ref = field_ref
        self.field_string = field_string
        self.operator = operator
        self.field_array_of_strings = field_array_of_strings
        self.field_anonymous_struct = field_anonymous_struct

    def to_json(self) -> dict[str, object]:
        payload: dict[str, object] = {
        }
        if self.field_ref is not None:
            payload["FieldRef"] = self.field_ref.to_json()
        if self.field_string is not None:
            payload["FieldString"] = self.field_string
        if self.operator is not None:
            payload["Operator"] = self.operator
        if self.field_array_of_strings is not None:
            payload["FieldArrayOfStrings"] = self.field_array_of_strings
        if self.field_anonymous_struct is not None:
            payload["FieldAnonymousStruct"] = self.field_anonymous_struct.to_json()
        return payload


class SomeOtherStruct:
    field_any: object

    def __init__(self, field_any: object = None):
        self.field_any = field_any

    def to_json(self) -> dict[str, object]:
        payload: dict[str, object] = {
            "FieldAny": self.field_any,
        }
        return payload
