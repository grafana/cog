# Fields with struct field with defaults
-- ir.json --
{
    "Package": "defaults",
    "Objects": [
        {
          "Name": "NestedStruct",
          "SelfRef": {
            "ReferredPkg": "defaults",
            "ReferredType": "NestedStruct"
          },
          "Type": {
            "Kind": "struct",
            "Nullable": false,
            "Struct": {
              "Fields": [
                {
                  "Name": "stringVal",
                  "Type": {
                    "Kind": "scalar",
                    "Nullable": false,
                    "Scalar": {
                      "ScalarKind": "string"
                    }
                  },
                  "Required": true
                },
                {
                  "Name": "intVal",
                  "Type": {
                    "Kind": "scalar",
                    "Nullable": false,
                    "Scalar": {
                      "ScalarKind": "int64"
                    }
                  },
                  "Required": true
                }
              ]
            }
          }
        }, {
          "Name": "Struct",
          "SelfRef": {
            "ReferredPkg": "defaults",
            "ReferredType": "Struct"
          },
          "Type": {
            "Kind": "struct",
            "Nullable": false,
            "Struct": {
              "Fields": [
                {
                  "Name": "allFields",
                  "Type": {
                    "Kind": "ref",
                    "Ref": {
                      "ReferredPkg": "defaults",
                      "ReferredType": "NestedStruct"
                    },
                    "Default": {
                      "intVal": 3,
                      "stringVal": "hello"
                    }
                  },
                  "Required": true
                },
                {
                  "Name": "partialFields",
                  "Type": {
                    "Kind": "ref",
                    "Ref": {
                      "ReferredPkg": "defaults",
                      "ReferredType": "NestedStruct"
                    },
                    "Default": {
                      "intVal": 3
                    }
                  },
                  "Required": true
                },
                {
                  "Name": "emptyFields",
                  "Type": {
                    "Kind": "ref",
                    "Ref": {
                      "ReferredPkg": "defaults",
                      "ReferredType": "NestedStruct"
                    }
                  },
                  "Required": true
                },
                {
                  "Name": "complexField",
                  "Type": {
                    "Kind": "struct",
                    "Nullable": false,
                    "Default": {
                      "array": [
                        "hello"
                      ],
                      "nested": {
                        "nestedVal": "nested"
                      },
                      "uid": "myUID"
                    },
                    "Struct": {
                      "Fields": [
                        {
                          "Name": "uid",
                          "Type": {
                            "Kind": "scalar",
                            "Nullable": false,
                            "Scalar": {
                              "ScalarKind": "string"
                            }
                          },
                          "Required": true
                        },
                        {
                          "Name": "nested",
                          "Type": {
                            "Kind": "struct",
                            "Nullable": false,
                            "Struct": {
                              "Fields": [
                                {
                                  "Name": "nestedVal",
                                  "Type": {
                                    "Kind": "scalar",
                                    "Nullable": false,
                                    "Scalar": {
                                      "ScalarKind": "string"
                                    }
                                  },
                                  "Required": true
                                }
                              ]
                            }
                          },
                          "Required": true
                        },
                        {
                          "Name": "array",
                          "Type": {
                            "Kind": "array",
                            "Nullable": false,
                            "Array": {
                              "ValueType": {
                                "Kind": "scalar",
                                "Nullable": false,
                                "Scalar": {
                                  "ScalarKind": "string"
                                }
                              }
                            }
                          },
                          "Required": true
                        }
                      ]
                    }
                  },
                  "Required": true
                },
                {
                  "Name": "partialComplexField",
                  "Type": {
                    "Kind": "struct",
                    "Nullable": false,
                    "Default": {
                      "xxxx": "myUID"
                    },
                    "Struct": {
                      "Fields": [
                        {
                          "Name": "uid",
                          "Type": {
                            "Kind": "scalar",
                            "Nullable": false,
                            "Scalar": {
                              "ScalarKind": "string"
                            }
                          },
                          "Required": true
                        },
                        {
                          "Name": "intVal",
                          "Type": {
                            "Kind": "scalar",
                            "Nullable": false,
                            "Scalar": {
                              "ScalarKind": "int64"
                            }
                          },
                          "Required": true
                        }
                      ]
                    }
                  },
                  "Required": true
                }
              ]
            }
          }
        }
    ]
}

-- out/jennies/GoRawTypes --
== defaults/types_gen.go
package defaults

type NestedStruct struct {
	StringVal string `json:"stringVal"`
	IntVal int64 `json:"intVal"`
}

type Struct struct {
	AllFields NestedStruct `json:"allFields"`
	PartialFields NestedStruct `json:"partialFields"`
	EmptyFields NestedStruct `json:"emptyFields"`
	ComplexField struct {
	Uid string `json:"uid"`
	Nested struct {
	NestedVal string `json:"nestedVal"`
} `json:"nested"`
	Array []string `json:"array"`
} `json:"complexField"`
	PartialComplexField struct {
	Uid string `json:"uid"`
	IntVal int64 `json:"intVal"`
} `json:"partialComplexField"`
}

-- out/jennies/TypescriptRawTypes --
== src/defaults/types_gen.ts
export interface NestedStruct {
	stringVal: string;
	intVal: number;
}

export const defaultNestedStruct = (): NestedStruct => ({
	stringVal: "",
	intVal: 0,
});

export interface Struct {
	allFields: NestedStruct;
	partialFields: NestedStruct;
	emptyFields: NestedStruct;
	complexField: {
		uid: string;
		nested: {
			nestedVal: string;
		};
		array: string[];
	};
	partialComplexField: {
		uid: string;
		intVal: number;
	};
}

export const defaultStruct = (): Struct => ({
	allFields: { stringVal: "hello", intVal: 3, },
	partialFields: { stringVal: "", intVal: 3, },
	emptyFields: defaultNestedStruct(),
	complexField: { uid: "myUID", nested: { nestedVal: "nested", }, array: [
"hello",
], },
	partialComplexField: { uid: "", intVal: 0, },
});

-- out/jennies/JavaRawTypes --
== defaults/NestedStruct.java
package defaults;


public class NestedStruct {
    public String stringVal;
    public Long intVal;
    
}
== defaults/DefaultsStructComplexFieldNested.java
package defaults;


public class DefaultsStructComplexFieldNested {
    public String nestedVal;
    
}
== defaults/DefaultsStructComplexField.java
package defaults;

import java.util.List;

public class DefaultsStructComplexField {
    public String uid;
    public DefaultsStructComplexFieldNested nested;
    public List<String> array;
    
}
== defaults/DefaultsStructPartialComplexField.java
package defaults;


public class DefaultsStructPartialComplexField {
    public String uid;
    public Long intVal;
    
}
== defaults/Struct.java
package defaults;


public class Struct {
    public NestedStruct allFields;
    public NestedStruct partialFields;
    public NestedStruct emptyFields;
    public DefaultsStructComplexField complexField;
    public DefaultsStructPartialComplexField partialComplexField;
    
}
-- out/jennies/PythonRawTypes --
== models/defaults.py
import typing


class NestedStruct:
    string_val: str
    int_val: int

    def __init__(self, string_val: str = "", int_val: int = 0):
        self.string_val = string_val
        self.int_val = int_val

    def to_json(self) -> dict[str, object]:
        payload: dict[str, object] = {
            "stringVal": self.string_val,
            "intVal": self.int_val,
        }
        return payload


class DefaultsStructComplexFieldNested:
    nested_val: str

    def __init__(self, nested_val: str = ""):
        self.nested_val = nested_val

    def to_json(self) -> dict[str, object]:
        payload: dict[str, object] = {
            "nestedVal": self.nested_val,
        }
        return payload


class DefaultsStructComplexField:
    uid: str
    nested: 'DefaultsStructComplexFieldNested'
    array: list[str]

    def __init__(self, uid: str = "", nested: typing.Optional['DefaultsStructComplexFieldNested'] = None, array: typing.Optional[list[str]] = None):
        self.uid = uid
        self.nested = nested if nested is not None else DefaultsStructComplexFieldNested()
        self.array = array if array is not None else []

    def to_json(self) -> dict[str, object]:
        payload: dict[str, object] = {
            "uid": self.uid,
            "nested": None if self.nested is None else self.nested.to_json(),
            "array": self.array,
        }
        return payload


class DefaultsStructPartialComplexField:
    uid: str
    int_val: int

    def __init__(self, uid: str = "", int_val: int = 0):
        self.uid = uid
        self.int_val = int_val

    def to_json(self) -> dict[str, object]:
        payload: dict[str, object] = {
            "uid": self.uid,
            "intVal": self.int_val,
        }
        return payload


class Struct:
    all_fields: 'NestedStruct'
    partial_fields: 'NestedStruct'
    empty_fields: 'NestedStruct'
    complex_field: 'DefaultsStructComplexField'
    partial_complex_field: 'DefaultsStructPartialComplexField'

    def __init__(self, all_fields: typing.Optional['NestedStruct'] = None, partial_fields: typing.Optional['NestedStruct'] = None, empty_fields: typing.Optional['NestedStruct'] = None, complex_field: typing.Optional['DefaultsStructComplexField'] = None, partial_complex_field: typing.Optional['DefaultsStructPartialComplexField'] = None):
        self.all_fields = all_fields if all_fields is not None else NestedStruct(int_val=3, string_val="hello")
        self.partial_fields = partial_fields if partial_fields is not None else NestedStruct(int_val=3)
        self.empty_fields = empty_fields if empty_fields is not None else NestedStruct()
        self.complex_field = complex_field if complex_field is not None else DefaultsStructComplexField(array=["hello"], nested=DefaultsStructComplexFieldNested(nested_val="nested"), uid="myUID")
        self.partial_complex_field = partial_complex_field if partial_complex_field is not None else DefaultsStructPartialComplexField()

    def to_json(self) -> dict[str, object]:
        payload: dict[str, object] = {
            "allFields": None if self.all_fields is None else self.all_fields.to_json(),
            "partialFields": None if self.partial_fields is None else self.partial_fields.to_json(),
            "emptyFields": None if self.empty_fields is None else self.empty_fields.to_json(),
            "complexField": None if self.complex_field is None else self.complex_field.to_json(),
            "partialComplexField": None if self.partial_complex_field is None else self.partial_complex_field.to_json(),
        }
        return payload
