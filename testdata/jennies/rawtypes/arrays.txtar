# Arrays
-- ir.json --
{
    "Package": "arrays",
    "Objects": [
        {
            "Name": "ArrayOfStrings",
            "Comments": ["List of tags, maybe?"],
            "Type": {
                "Kind": "array",
                "Array": {
                    "ValueType": {
                        "Kind": "scalar",
                        "Scalar": {"ScalarKind": "string"}
                    }
                }
            }
        },

        {
            "Name": "someStruct",
            "Type": {
                "Kind": "struct",
                "Struct": {
                    "Fields": [
                        {
                            "Name": "FieldAny",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "any"}
                            }
                        }
                    ]
                }
            }
        },
        {
            "Name": "ArrayOfRefs",
            "Type": {
                "Kind": "array",
                "Array": {
                    "ValueType": {
                        "Kind": "ref",
                        "Ref": {"ReferredPkg": "arrays", "ReferredType": "someStruct"}
                    }
                }
            }
        },

        {
            "Name": "ArrayOfArrayOfNumbers",
            "Type": {
                "Kind": "array",
                "Array": {
                    "ValueType": {
                        "Kind": "array",
                        "Array": {
                            "ValueType": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "int64"}
                            }
                        }
                    }
                }
            }
        }
    ]
}
-- out/jennies/TypescriptRawTypes --
== src/arrays/types_gen.ts
// List of tags, maybe?
export type ArrayOfStrings = string[];

export const defaultArrayOfStrings = (): ArrayOfStrings => ([]);

export interface someStruct {
	FieldAny: any;
}

export const defaultSomeStruct = (): someStruct => ({
	FieldAny: {},
});

export type ArrayOfRefs = someStruct[];

export const defaultArrayOfRefs = (): ArrayOfRefs => ([]);

export type ArrayOfArrayOfNumbers = number[][];

export const defaultArrayOfArrayOfNumbers = (): ArrayOfArrayOfNumbers => ([]);

-- out/jennies/GoRawTypes --
== arrays/types_gen.go
package arrays

// List of tags, maybe?
type ArrayOfStrings []string

type SomeStruct struct {
	FieldAny any `json:"FieldAny"`
}

type ArrayOfRefs []SomeStruct

type ArrayOfArrayOfNumbers [][]int64

-- out/jennies/JavaRawTypes --
== arrays/SomeStruct.java
package arrays;


public class SomeStruct {
    public Object FieldAny;
    
}
-- out/jennies/PythonRawTypes --
== models/arrays.py
# List of tags, maybe?
ArrayOfStrings = list[str]


class SomeStruct:
    field_any: object

    def __init__(self, field_any: object = None):
        self.field_any = field_any

    def to_json(self) -> dict[str, object]:
        payload: dict[str, object] = {
            "FieldAny": self.field_any,
        }
        return payload


ArrayOfRefs = list['SomeStruct']


ArrayOfArrayOfNumbers = list[list[int]]
