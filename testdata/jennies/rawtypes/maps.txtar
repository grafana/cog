# Maps
-- ir.json --
{
    "Package": "maps",
    "Objects": [
        {
            "Name": "MapOfStringToAny",
            "Comments": ["String to... something."],
            "Type": {
                "Kind": "map",
                "Map": {
                    "IndexType": {
                        "Kind": "scalar",
                        "Scalar": {"ScalarKind": "string"}
                    },
                    "ValueType": {
                        "Kind": "scalar",
                        "Scalar": {"ScalarKind": "any"}
                    }
                }
            }
        },

        {
            "Name": "MapOfStringToString",
            "Type": {
                "Kind": "map",
                "Map": {
                    "IndexType": {
                        "Kind": "scalar",
                        "Scalar": {"ScalarKind": "string"}
                    },
                    "ValueType": {
                        "Kind": "scalar",
                        "Scalar": {"ScalarKind": "string"}
                    }
                }
            }
        },

        {
            "Name": "SomeStruct",
            "Type": {
                "Kind": "struct",
                "Struct": {
                    "Fields": [
                        {
                            "Name": "FieldAny",
                            "Required": true,
                            "Type": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "any"}
                            }
                        }
                    ]
                }
            }
        },
        {
            "Name": "MapOfStringToRef",
            "Type": {
                "Kind": "map",
                "Map": {
                    "IndexType": {
                        "Kind": "scalar",
                        "Scalar": {"ScalarKind": "string"}
                    },
                    "ValueType": {
                        "Kind": "ref",
                        "Ref": {"ReferredPkg": "maps", "ReferredType": "SomeStruct"}
                    }
                }
            }
        },

        {
            "Name": "MapOfStringToMapOfStringToBool",
            "Type": {
                "Kind": "map",
                "Map": {
                    "IndexType": {
                        "Kind": "scalar",
                        "Scalar": {"ScalarKind": "string"}
                    },
                    "ValueType": {
                        "Kind": "map",
                        "Map": {
                            "IndexType": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "string"}
                            },
                            "ValueType": {
                                "Kind": "scalar",
                                "Scalar": {"ScalarKind": "bool"}
                            }
                        }
                    }
                }
            }
        }
    ]
}
-- out/jennies/TypescriptRawTypes --
== src/maps/types_gen.ts
// String to... something.
export type MapOfStringToAny = Record<string, any>;

export const defaultMapOfStringToAny = (): MapOfStringToAny => ({});

export type MapOfStringToString = Record<string, string>;

export const defaultMapOfStringToString = (): MapOfStringToString => ({});

export interface SomeStruct {
	FieldAny: any;
}

export const defaultSomeStruct = (): SomeStruct => ({
	FieldAny: {},
});

export type MapOfStringToRef = Record<string, SomeStruct>;

export const defaultMapOfStringToRef = (): MapOfStringToRef => ({});

export type MapOfStringToMapOfStringToBool = Record<string, Record<string, boolean>>;

export const defaultMapOfStringToMapOfStringToBool = (): MapOfStringToMapOfStringToBool => ({});

-- out/jennies/GoRawTypes --
== maps/types_gen.go
package maps

// String to... something.
type MapOfStringToAny map[string]any

type MapOfStringToString map[string]string

type SomeStruct struct {
	FieldAny any `json:"FieldAny"`
}

type MapOfStringToRef map[string]SomeStruct

type MapOfStringToMapOfStringToBool map[string]map[string]bool

