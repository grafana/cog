<?php

namespace {{ .NamespaceRoot }}\{{ .Converter.Package | formatPackageName }};

{{ template "converter" . }}

{{- define "guard" }}
{{- $operator := .Op -}}
{{- if eq $operator "==" -}}{{ $operator = "===" }}{{- end -}}
{{- if eq $operator "!=" -}}{{ $operator = "!==" }}{{- end -}}
{{- if eq $operator "!=" -}}{{ $operator = "!==" }}{{- end -}}

    {{- if and (eq $operator "!==") (eq .Value nil) -}}
        ${{ .Path | formatPath }} !== null
    {{- else -}}
        {{- $leftOperand := print "$" (.Path | formatPath) -}}
        {{- if eq .Op "minLength" -}}
            {{- $leftOperand = print "count(" $leftOperand ")" -}}
            {{- $operator = ">=" -}}
        {{- end -}}
        {{- if eq .Op "maxLength" -}}
            {{- $leftOperand = print "count(" $leftOperand ")" -}}
            {{- $operator = "<=" -}}
        {{- end -}}
        {{- $leftOperand }} {{ $operator}} {{ .Value | formatScalar -}}
    {{- end -}}
{{- end }}

{{- define "value_formatter" -}}
    \var_export(${{ .Path | formatPath }}, true)
{{- end }}

{{- define "guards" }}
    {{- $guardsCount := sub1 (len .) -}}
    {{- range $i, $guard := . }}{{- template "guard" $guard }}{{ if ne $i $guardsCount }} && {{ end }}{{ end }}
{{- end }}

{{- define "prepare_arg" -}}
    {{- with .Arg.Builder -}}
        ${{ $.IntoVar }} = {{ formatRawRef .BuilderPkg (print .BuilderName "Converter") }}::convert(${{ .ValuePath | formatPath }});
    {{- end -}}
    {{- with .Arg.Array -}}
        $tmp{{ $.IntoVar }} = [];
        foreach (${{ .For | formatPath }} as ${{ .ValueAs | formatPath }}) {
        {{- $subIntoVar := print "tmp" .For.Last.Identifier (.ValueAs | formatPath) }}
        {{ template "prepare_arg" (dict "IntoVar" $subIntoVar "Arg" .ForArg) }}
        $tmp{{ $.IntoVar }}[] = ${{ $subIntoVar }};
        }
        ${{ $.IntoVar }} = "[" . implode(", \n", $tmp{{ $.IntoVar }}) . "]";
    {{- end -}}
    {{- with .Arg.Runtime -}}
        ${{ $.IntoVar }} = {{ "Cog\\Runtime" | fullNamespaceRef }}::get()->{{ .FuncName|formatOptionName }}({{ range $i, $runtimeArg := .Args }}{{ if eq $i 0}}${{ $runtimeArg.ValuePath | formatPath }}{{ else }}${{ $runtimeArg.ValuePath | formatPath }}{{ end }}, {{ end }});
    {{- end -}}
    {{- with .Arg.Direct -}}
        ${{ $.IntoVar }} = {{- template "value_formatter" (dict "Type" .ValueType "Path" .ValuePath) -}};
    {{- end -}}
{{- end }}

{{- define "option_mapping" -}}
    {{- $argsCount := sub1 (len .Args) -}}
    {{- with .ArgumentGuards -}}if ({{ template "guards" . }}) { {{- end }}
    {{- if and (eq (len .Guards) 0) (eq (len .ArgumentGuards) 0) -}} { {{- end }}
    $buffer .= '{{ .Option.Name | formatOptionName }}(';
    {{- range $i, $arg := .Args }}
        {{- $intoVar := print "arg" $i }}
        {{ template "prepare_arg" (dict "IntoVar" $intoVar "Arg" $arg) }}
        $buffer .= ${{ $intoVar }};
        {{ if ne $i $argsCount }}$buffer .= ', ';{{- end }}
    {{- end }}
    $buffer .= ')';

    $calls[] = $buffer;
    $buffer = '';
    {{ with .ArgumentGuards -}} } {{- end }}
    {{- if and (eq (len .Guards) 0) (eq (len .ArgumentGuards) 0) -}} } {{- end }}
{{- end }}

{{- define "conversion_mapping" -}}
    {{- $firstOpt := .Options | first }}
    {{- with $firstOpt.Guards -}}if ({{ template "guards" . }}) { {{- end }}
    {{ if ne .RepeatFor nil -}}foreach (${{ .RepeatFor | formatPath }} as ${{ .RepeatAs }}) { {{- end }}
    {{- range $optMapping := .Options }}
        {{ template "option_mapping" $optMapping }}
    {{- end }}
    {{ if ne .RepeatFor nil -}} } {{- end }}
    {{ with $firstOpt.Guards -}} } {{- end }}
{{- end }}

{{- define "converter" -}}
final class {{ .Converter.BuilderName | upperCamelCase }}Converter
{
    public static function convert({{ formatRawRef .Converter.Input.TypeRef.ReferredPkg .Converter.Input.TypeRef.ReferredType }} $input): string
    {
        {{- $constructorArgsCount := sub1 (len .Converter.ConstructorArgs) }}
        $calls = [
            'new {{ formatRawRef .Converter.Package .Converter.BuilderName }}Builder({{ with .Converter.ConstructorArgs}}'.{{ range $i, $arg := . }}{{- template "value_formatter" (dict "Type" $arg.ValueType "Path" $arg.ValuePath ) -}}{{- if ne $i $constructorArgsCount }} . ", " .{{ end }}{{ end }}.'{{ end }})',
        ];
        $buffer = '';

        {{- range .Converter.Mappings }}
            {{ template "conversion_mapping" . }}
        {{- end }}

        return \implode("->\t\n", $calls);
    }
}
{{- end }}

