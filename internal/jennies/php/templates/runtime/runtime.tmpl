<?php

namespace {{ .NamespaceRoot }}\Cog;

final class Runtime
{
    /**
     * @var array<string, PanelcfgConfig>
     */
    private $panelcfgVariants = [];

    /**
     * @var array<string, DataqueryConfig>
     */
    private $dataqueryVariants = [];

    private static ?self $instance = null;

    private function __construct()
    {
{{- range $schema := .PanelSchemas }}
        $this->registerPanelcfgVariant(\{{ $.NamespaceRoot }}\{{ $schema.Package|formatPackageName }}\VariantConfig::get());
{{- end }}
    }

    public static function get(): self
    {
        if (self::$instance === null) {
            self::$instance = new self();
        }

        return self::$instance;
    }

    public function registerPanelcfgVariant(PanelcfgConfig $variantConfig): void
    {
        $this->panelcfgVariants[$variantConfig->identifier] = $variantConfig;
    }

    public function registerDataqueryVariant(DataqueryConfig $variantConfig): void
    {
        $this->dataqueryVariants[$variantConfig->identifier] = $variantConfig;
    }

    public function panelcfgVariantExists(string $identifier): bool
    {
        return isset($this->panelcfgVariants[$identifier]);
    }

    public function panelcfgVariantConfig(string $identifier): PanelcfgConfig
    {
        if (!$this->panelcfgVariantExists($identifier)) {
            throw new \ValueError("$identifier panelcfg does not exist");
        }

        return $this->panelcfgVariants[$identifier];
    }

    /**
     * @param array<string, mixed> $data
     */
    public function dataqueryFromArray(array $data, string $dataqueryTypeHint): Dataquery
    {
        // A hint tells us the dataquery type: let's use it.
        if (!empty($dataqueryTypeHint) && isset($this->dataqueryVariants[$dataqueryTypeHint])) {
            $fromArray = $this->dataqueryVariants[$dataqueryTypeHint]->fromArray;

            return $fromArray($data);
        }

        // We have no idea what type the dataquery is: use our `UnknownDataquery` bag to not lose data.
        return new UnknownDataquery($data);
    }

    /**
     * @param array<array<string, mixed>> $data
     * @return Dataquery[]
     */
    public function dataqueriesFromArray(array $data, string $dataqueryTypeHint): array
    {
        $queries = [];
        foreach ($data as $query) {
            $queries[] = $this->dataqueryFromArray($query, $dataqueryTypeHint);
        }
        return $queries;
    }
}
