package {{ .Schema.Package }}

import (
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/types"
)

{{ range .Objects }}
type {{ .Name | formatObjectName }}DataSourceModel struct {
  {{- range .Type.Struct.Fields | filterScalars }}
    {{.Name | formatFieldName }} {{.Type | formatTerraformType }} `tfsdk:"{{.Name | formatFieldNameTFSDK }}"`
  {{- end }}
    TemporaryScalarPlaceholder types.Bool // @TODO Remove this once non-scalars are implemented
}

func (m {{ .Name | formatObjectName }}DataSourceModel) MarshalJSON() ([]byte, error) {
	type json{{ .Name | formatObjectName }}DataSourceModel struct {
    {{- range .Type.Struct.Fields | filterScalars }}
      {{.Name | formatFieldName }} {{.Type | formatGolangType }} `json:"{{. | formatJSONField }}"`
    {{- end }}
	}

	m = m.ApplyDefaults()
  {{- range .Type.Struct.Fields | filterScalars }}
    attr_{{.Name | formatAttrName }} := m.{{ .Name | formatFieldName }}.{{ .Type | formatTypeValue }}
  {{- end }}

	model := &json{{ .Name | formatObjectName }}DataSourceModel{
  {{- range .Type.Struct.Fields | filterScalars }}
      {{ .Name | formatFieldName }}: attr_{{ .Name | formatAttrName }},
	{{- end }}
  }
	return json.Marshal(model)
}

func (m {{ .Name | formatObjectName }}DataSourceModel) ApplyDefaults() {{ .Name | formatObjectName }}DataSourceModel {
  {{- range .Type.Struct.Fields | filterScalars | filterDefaults }}
	if m.{{.Name | formatFieldName }}.IsNull() {
		m.{{.Name | formatFieldName}} = types.{{ .Type | formatTypeValueNoPointers .Type.Default }}
	}
  {{- end }}
	return m
}

{{ end }}

