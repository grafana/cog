{{- define "builder" }}
    public static class {{ .BuilderName }}Builder{{ if .Builder.IsGeneric }}<T extends {{ .BuilderName }}Builder<T>>{{ end }} implements {{ if not (eq .Builder.ImportAlias "") }}{{ .Builder.ImportAlias }}.{{ end }}cog.Builder<{{ .Builder.BuilderSignatureType }}> {
        protected final {{ .Builder.ObjectName }} internal;
        
        {{- range .Builder.Properties }}
        private {{ .Type | formatBuilderFieldType }} {{ .Name | escapeVar }};
        {{- end }}
        
        public {{ .BuilderName }}Builder({{- template "args" (dict "Arguments" .Builder.Constructor.Args "IsBuilder" true) }}) {
            this.internal = new {{ .Builder.ObjectName }}();
        {{- range .Builder.Constructor.Assignments }}
            {{- template "assignment" (dict "Assignment" . "BuilderName" $.BuilderName "OptionName" "") }}
        {{- end }}
        
        {{- range .Builder.Properties }}
        this.{{ .Name | escapeVar }} = {{ .Type | emptyValueForType }};
        {{- end }}

        {{- range .Builder.Defaults }}
        {{- range .Initializers }}
        {{ . }}
        {{- end }}
        this.{{ .OptionName | lowerCamelCase | escapeVar }}({{ .Args|join ", " }});
        {{- end }}
        }
        
    {{- range $opt := .Builder.Options }}
    public {{ if $.Builder.IsGeneric }}T {{ else }}{{ $.BuilderName }}Builder {{ end }}{{ .Name | lowerCamelCase | escapeVar }}({{- template "args" (dict "Arguments" .Args "IsBuilder" true) }}) {
        {{- range .Assignments }}
            {{- template "assignment" (dict "Assignment" . "BuilderName" $.Builder.BuilderName "OptionName" $opt.Name) }}
        {{- end }}
        return {{ if $.Builder.IsGeneric }}(T) {{ end }}this;
    }
    {{ end -}}
        
        public {{ .Builder.ObjectName }} build() {
            return this.internal;
        }
    }
{{- end }}
