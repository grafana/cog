package {{ .Package }};
{{- $class := include "class" . }}

{{ .Imports }}

{{- $class }}

{{- define "class" }}
{{- range .Comments }}
// {{ . }}
{{- end }}

{{- if .ShouldAddDeserializer }}
@JsonDeserialize(using = {{ .Name }}Deserializer.class)
{{- end }}
{{- if .ShouldAddSerializer }}
@JsonSerialize(using = {{ .Name }}Serializer.class)
{{- end }}
public class {{ .Name }}{{ if .Extends }} extends {{ range $i, $e := .Extends }}{{ if gt $i 0 }}, {{ end }}{{ $e }}{{ end }}{{ end }}{{ if .Variant }} implements {{ .Variant }}{{ end }} {
    {{- template "types" dict "Fields" .Fields "Annotation" .Annotation "HasFactoryMethods" .ShouldAddFactoryMethods }}
    
    {{- if .ShouldAddFactoryMethods }}
    protected {{ .Name }}() {}
    {{- range .Fields }}
    public static {{ $.Name }} create{{ .Name }}({{ .Type | formatBuilderFieldType }} {{ .Name | lowerCamelCase | escapeVar }}) {
        {{ $.Name }} {{ $.Name | lowerCamelCase }} = new {{ $.Name }}();
        {{ $.Name | lowerCamelCase }}.{{ .Name | lowerCamelCase | escapeVar }} = {{ .Name | lowerCamelCase | escapeVar }}{{ if .Type | typeHasBuilder }}.build(){{ end }};
        return {{ $.Name | lowerCamelCase }};
    }
    {{- end }}
    {{- else }}
    public {{ .Name }}() {
        {{- range .Defaults }}
        {{- range .Initializers }}
        {{ . }}
        {{- end }}
        this.{{ .OptionName | lowerCamelCase | escapeVar }} = {{ .Args|join ", " }};
        {{- end }}
    }
    {{- end }}

    {{- if and (ne .ToJSONFunction "") (not .Extends) }}
    {{ .ToJSONFunction }}
    {{- end }}

    {{- if and .HasBuilder (not .Extends) }}
    {{- range .Builders }}
    {{- $builderName := gt (len $.Builders) 1 | ternary .BuilderName  "" }}
    {{ template "builder" (dict "Builder" . "BuilderName" $builderName) }}
    {{- end }}
    {{- end }}
}
{{- end }}

{{- define "types" }}
    {{- range .Fields }}
    {{- range .Comments }}
    // {{ . }}
    {{- end }}
    {{- if ne $.Annotation "" }}
    {{- if fillNullableAnnotationPattern .Type }}
    {{ fillNullableAnnotationPattern .Type }}
    {{- end }}
    {{ fillAnnotationPattern $.Annotation .Name }}
    {{- end }}
    {{ if $.HasFactoryMethods }}protected{{ else }}public{{ end }} {{ .Type | formatType }} {{ .Name | lowerCamelCase | escapeVar }};
    {{- end }}
{{- end }}
