package {{ .Package }};

import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

public class Runtime {
    public static String dump(Object object) {
        if (object instanceof String) {
            return (String) object;
        } else if (object instanceof Integer || object instanceof Float || object instanceof Double ||
                object instanceof Boolean || object instanceof Long || object instanceof Character ||
                object instanceof Short || object instanceof Byte) {
            return object.toString();
        } else if (object instanceof List) {
            return "List.of(" + formatList((List<?>) object) + ")";
        } else if (object instanceof Map) {
            return "Map.ofEntries(" + formatMap((Map<?, ?>) object) + ")";
        } else if (object == null) {
            return "null";
        }

        return "Unsupported type: " + object.getClass().getSimpleName();
    }
    
    public static String escapeString(String input) {
        if (input.contains("\n")) {
            String[] lines = input.split("\n");
            StringBuilder formatted = new StringBuilder("\"\"\"\n");
            for (String line : lines) {
                formatted.append(line.replace("\\", "\\\\")
                                .replace("\"", "\\\"")
                                .replaceAll("\\s+$", "\\\\s"))
                        .append("\n");
            }
            formatted.append("\"\"\"");
            return formatted.toString();
        }

        return "\"" +
                input.replace("\\", "\\\\")
                        .replace("\"", "\\\"")
                + "\"";

    }
    
    public static <T extends Enum<T>> String formatEnum(Class<T> enumClass, T enumValue) {
        String className = enumClass.getSimpleName();
        String value;

        if (enumValue != null) {
            value = enumValue.name();
        } else {
            T defaultEnumValue = enumClass.getEnumConstants()[0];
            value = defaultEnumValue.name();
        }

        return String.format("%s.%s", className, value);
    }

    private static String formatList(List<?> list) {
        StringJoiner joiner = new StringJoiner(", ");
        for (Object item : list) {
            joiner.add(dump(item));
        }
        return joiner.toString();
    }

    private static String formatMap(Map<?, ?> map) {
        StringJoiner joiner = new StringJoiner(", ");
        for (Map.Entry<?, ?> entry : map.entrySet()) {
            joiner.add(dump(entry.getKey()) + "=" + dump(entry.getValue()));
        }
        return joiner.toString();
    }
}
