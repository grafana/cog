package {{ .Converter.Package | formatPackageName }};

{{ $converter := include "converter" . }}

{{ .Imports }}

{{ $converter }}

{{- define "guard" }}
    {{- $leftOperand := print (.Path | formatPath) -}}
    {{- if and (eq .Op "!=") (eq .Value nil) -}}
        {{ $leftOperand }} != null
    {{- else if isScalarType .Path "bool" -}}
        !{{- $leftOperand }}
    {{- else if isScalarType .Path "string" -}}
        !{{- $leftOperand }}.isEmpty()
    {{- else if is .Path.Last.Type "ref" }}
        {{- formatRefType .Path.Last.Type .Value }}
    {{- else -}}
        {{- $operator := .Op -}}
        {{- if eq .Op "minLength" -}}
            {{- $leftOperand = print $leftOperand ".size()" -}}
            {{- $operator = ">=" -}}
        {{- end }}
        {{- if eq .Op "maxLength" -}}
            {{- $leftOperand = print $leftOperand ".size()" -}}
            {{- $operator = "<=" -}}
        {{- end }}

        {{- $leftOperand }} {{ $operator }} {{ .Value | formatScalar -}}
    {{- end -}}
{{- end }}

{{- define "value_formatter" -}}
    {{- if .Type.IsAny -}}
        {{ .Path | formatPath }}
    {{- else if .Type.IsScalar -}}
        {{ .Path | formatPath }}
    {{- else -}}
        {{ .Path | formatPath }}
    {{- end -}}
{{- end }}

{{- define "guards" }}
    {{- $guardsCount := sub1 (len .) -}}
    {{- range $i, $guard := . }}{{- template "guard" $guard }}{{ if ne $i $guardsCount }} && {{ end }}{{ end }}
{{- end }}

{{- define "prepare_arg" -}}
    {{- with .Arg.Builder -}}
        String {{ $.IntoVar }} = {{ formatRawRef .BuilderPkg (print .BuilderName "Converter") }}.convert({{ .ValuePath | formatPath }}{{ if $.IsMapEntry }}.getValue(){{ end }});
    {{- end -}}
    {{- with .Arg.BuilderDisjunction -}}
            String {{ $.IntoVar }} = "";        
            switch ({{ (first (first .).Guards).Path }}) {
            {{- range $builderChoice := . }}
                case {{ last (split "." (include "guards" $builderChoice.Guards)) }}:
                    {{ $.IntoVar }} = {{ formatRawRef $builderChoice.Builder.BuilderPkg (print $builderChoice.Builder.BuilderName "Converter") }}.convert({{ $builderChoice.Builder.ValuePath }});
            {{- end }}
            }
    {{- end -}}
    {{- with .Arg.Array -}}
        List<String> tmp{{ $.IntoVar }} = new LinkedList<>();
        for ({{ .ValueType | formatType }} {{ .ValueAs | formatPath }} : {{ .For | formatPath }}) {
            {{- $subIntoVar := print "tmp" .For.Last.Identifier (.ValueAs | formatPath) }}
            {{ template "prepare_arg" (dict "IntoVar" $subIntoVar "Arg" .ForArg "IsMapEntry" false) }}
            {{- if and (is .ValueType "scalar") (not (isScalarType .For "string")) }}
            tmp{{ $.IntoVar }}.add({{ $subIntoVar }}.toString());
            {{- else }}
            tmp{{ $.IntoVar }}.add({{ $subIntoVar }});
            {{- end }}
        }
        String {{ $.IntoVar }} = "List.of("+ String.join(",\n", tmp{{ $.IntoVar }}) +")";
    {{- end -}}
    {{- with .Arg.Map -}}
        {{- $reflect := importStdPkg "java.util" "Map" -}}
        {{- $reflect := importStdPkg "java.util" "HashMap" -}}
        Map<{{ .IndexType | formatType }}, String> {{ $.IntoVar }} = new HashMap<>();
        for (Map.Entry<{{ .IndexType | formatType }}, {{ .ValueType | formatType }}> {{ .ValueAs | formatPath }} : {{ .For }}.entrySet()) {
            {{- $subIntoVar := print "tmp" .For.Last.Identifier (.ValueAs) }}
            {{ template "prepare_arg" (dict "IntoVar" $subIntoVar "Arg" .ForArg "IsMapEntry" true) }}
            {{ $.IntoVar }}.put({{ .ValueAs | formatPath }}.getKey(), {{ $subIntoVar }});
        }
    {{- end -}}
    {{- with .Arg.Runtime -}}
        {{- $reflect := importStdPkg "cog.variants" "Registry" -}}
        String {{ $.IntoVar }} = Registry.{{ .FuncName | lowerCamelCase }}({{ range $i, $runtimeArg := .Args }}{{ if gt $i 0 }}, {{ end }}{{ $runtimeArg.ValuePath | formatPath }}{{ end }});
    {{- end -}}
    {{- with .Arg.Direct -}}
        {{ .ValueType | formatType }} {{ $.IntoVar }} = {{- template "value_formatter" (dict "Type" .ValueType "Path" .ValuePath) -}}{{ if $.IsMapEntry }}.getValue(){{ end }};
    {{- end -}}
{{- end }}

{{- define "option_mapping" -}}
    {{- $argsCount := sub1 (len .Args) -}}
    {{- with .ArgumentGuards -}}if ({{ template "guards" . }}) { {{- end }}
    {{- if and (eq (len .Guards) 0) (eq (len .ArgumentGuards) 0) -}} { {{- end }}
        StringBuilder buffer = new StringBuilder();
        buffer.append("new {{ .Option.Name | upperCamelCase }}(");
    {{- range $i, $arg := .Args }}
        {{- $intoVar := print "arg" $i }}
        {{ template "prepare_arg" (dict "IntoVar" $intoVar "Arg" $arg "IsMapEntry" false) }}
        buffer.append({{ $intoVar }});
        {{ if ne $i $argsCount }}calls.add(", ");{{- end }}
    {{- end }}
        buffer.append(")");

        calls.add(buffer.toString());
    {{ with .ArgumentGuards -}} } {{- end }}
    {{- if and (eq (len .Guards) 0) (eq (len .ArgumentGuards) 0) -}} } {{- end }}
{{- end }}

{{- define "conversion_mapping" -}}
    {{- $firstOpt := .Options | first }}
    {{- with $firstOpt.Guards -}}if ({{ template "guards" . }}) { {{- end }}
    {{- if ne .RepeatFor nil -}}
        {{ $repeatFor := .RepeatFor.Last.Type.AsArray.ValueType | formatType }}
        for ({{ $repeatFor }} item : {{ .RepeatFor }}) { 
    {{ end }}
    {{- range $optMapping := .Options }}
        {{ template "option_mapping" $optMapping }}
    {{- end }}
    {{ if ne .RepeatFor nil -}} } {{- end }}
    {{- with $firstOpt.Guards -}} } {{- end }}
{{- end }}

{{- define "converter" -}}
public class {{ .Converter.BuilderName | upperCamelCase }}Converter {
    public static String convert({{ .InputIsDataquery | ternary "Dataquery" (formatRawRef .Converter.Input.TypeRef.ReferredPkg .Converter.Input.TypeRef.ReferredType) }} input) {
        List<String> calls = new LinkedList<>();
        {{- $constructorArgsCount := sub1 (len .Converter.ConstructorArgs) }}
        calls.add("{{ .Converter.BuilderName | upperCamelCase }}.Builder builder = new {{ .Converter.BuilderName | upperCamelCase }}.Builder({{ with .Converter.ConstructorArgs }}{{ range $i, $arg := . }}"+{{- template "value_formatter" (dict "Type" $arg.ValueType "Path" $arg.ValuePath ) -}}+"{{- if ne $i $constructorArgsCount }}, {{ end }}{{ end }}{{ end }})");
    
     {{- range .Converter.Mappings }}
        {{ template "conversion_mapping" . }}
     {{- end }}
     
     return String.join(".", calls);
     }
}
{{- end }}
