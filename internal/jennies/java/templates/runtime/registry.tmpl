package {{ .Package }};

import java.util.HashMap;
import java.util.Map;
{{ .Imports }}

public class Registry {
    private static final Map<String, PanelConfig> panelRegistry = new HashMap<>();
    private static final Map<String, DataqueryConfig> dataqueryRegistry = new HashMap<>();
    
    static {
        {{- range .PanelSchemas }}
        registerPanel({{ printf "%#v" .Identifier }}, {{ .Options }}, {{ .FieldConfig }}{{ if $.ShouldAddConverters }}, new {{ .Converter }}{{ end }});
        {{- end }}


        {{- range .DataquerySchemas }}
        registerDataquery({{ printf "%#v" .Identifier }}, {{ .Class }}{{ if $.ShouldAddConverters }}, new {{ .Converter }}{{ end }});
        {{- end }}
    }

    public static void registerDataquery(String type, Class<? extends Dataquery> clazz{{ if .ShouldAddConverters }}, Converter<Dataquery> converter{{ end }}) {
        dataqueryRegistry.put(type, new DataqueryConfig(clazz{{ if .ShouldAddConverters }}, converter{{ end }}));
    }

    public static Class<? extends Dataquery> getDataquery(String type) {
        return dataqueryRegistry.get(type).getDataquery();
    }
    
    public static void registerPanel(String type, Class<?> options, Class<?> fieldConfig{{ if .ShouldAddConverters }}, Converter<Panel> converter{{ end }}) {
        panelRegistry.put(type, new PanelConfig(options, fieldConfig{{ if .ShouldAddConverters }}, converter{{ end }}));
    }
    
    public static PanelConfig getPanel(String type) {
        return panelRegistry.get(type);
    }    

    {{- if .ShouldAddConverters }}
    public static String convertPanelToCode(Panel panel, String type) {
        return panelRegistry.get(type).getConverter().convert(panel);
    }
    
    public static String convertDataqueryToCode(Dataquery dataquery) {
        return dataqueryRegistry.get(dataquery.dataqueryName()).getConverter().convert(dataquery);
    }
    {{- end }}
    
}
