package {{ .Package }};

import java.util.HashMap;
import java.util.Map;
{{ .Imports }}

public class Registry {
    private static final Map<String, PanelConfig> panelRegistry = new HashMap<>();
    private static final Map<String, Class<? extends Dataquery>> dataqueryRegistry = new HashMap<>();
    
    static {
        {{- range .PanelSchemas }}
        registerPanel({{ printf "%#v" .Identifier }}, {{ .Options }}, {{ .FieldConfig }}{{ if $.ShouldAddConverters }}, {{ .Converter }}{{ end }});
        {{- end }}


        {{- range .DataquerySchemas }}
        registerDataquery({{ printf "%#v" .Identifier }}, {{ .Class }}{{ if $.ShouldAddConverters }}, {{ .Converter }}{{ end }});
        {{- end }}
    }

    public static void registerDataquery(String type, Class<? extends Dataquery> clazz) {
        dataqueryRegistry.put(type, clazz);
    }

    public static Class<? extends Dataquery> getDataquery(String type) {
        return dataqueryRegistry.get(type);
    }
    
    public static void registerPanel(String type, Class<?> options, Class<?> fieldConfig{{ if .ShouldAddConverters }}, Class<?> converters{{ end }}) {
        panelRegistry.put(type, new PanelConfig(options, fieldConfig{{ if .ShouldAddConverters }}, converters{{ end }}));
    }

    {{- if .ShouldAddConverters }}
    public static String convertPanelToCode(Panel panel, String type) {
        PanelConfig pc = panelRegistry.get(type);
        if (pc != null) {
            try {
                Object panelResult = pc.getConverter().getMethod("convert").invoke(panel);
                return (String) panelResult;
            } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {
                throw new RuntimeException(e);
            }
        }
        
        // TODO: Return unknown panel.
        return "";
    }
    {{- end }}
    
}
