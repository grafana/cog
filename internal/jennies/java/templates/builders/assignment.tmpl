{{- define "assignment" }}
    {{- template "constraints" .Assignment.Constraints }}
    {{- range .Assignment.InitSafeguards }}
    {{ . }}
    {{- end }}
    
    {{- template "assignment_setup" (dict "Assignment" .Assignment "Value" .Assignment.Value) }}

    {{- $value := include "assignment_value" (dict "Assignment" .Assignment "Value" .Assignment.Value) -}}
    {{- template "assignment_method" (dict "Method" .Assignment.Method "Path" .Assignment.Path "Value" $value) -}}
    
{{- end }}

{{- define "assignment_setup" }}
    {{- with .Value.Envelope }}
        {{ template "value_envelope" (dict "Assignment" $.Assignment "Envelope" .) }}
    {{- end }}
{{- end }}

{{- define "assignment_value" }}
    {{- if not (eq .Value.Constant nil) }}
        {{- formatScalar .Value.Constant }}
    {{- end }}
    {{- with .Value.Argument }}
        {{- if or (typeHasBuilder .Type) (resolvesToComposableSlot .Type) }}
        {{- escapeVar .Name }}.build()
        {{- else }}
        {{- escapeVar .Name }}
        {{- end }}
    {{- end }}
    {{- with .Value.Envelope }}
        {{- .Type | formatType | lowerCamelCase }}
    {{- end }}
{{- end }}

{{- define "value_envelope" }}
    {{ $envelopeType := .Envelope.Type | formatType }}
            {{- $envelopeType }} {{ $envelopeType | lowerCamelCase }} = new {{ $envelopeType }}();
    {{- range .Envelope.Values }}
        {{- $value := include "assignment_value" (dict "Assignment" $.Assignment "Value" .Value) }}
        {{ $envelopeType | lowerCamelCase }}.{{ (index .Path 0).Identifier | lowerCamelCase }} = {{ $value | lowerCamelCase }};
    {{- end }}
{{- end }}

{{- define "assignment_method" }}
        {{ if eq .Method "direct" }}this.{{ .Path }} = {{ .Value }};{{ end -}}
        {{ if eq .Method "append" }}this.{{ .Path }}.add({{ .Value }});{{ end -}}
{{- end }}
