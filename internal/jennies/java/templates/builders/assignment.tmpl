{{- define "assignment" }}
    {{- template "constraints" .Assignment.Constraints }}
    {{- range .Assignment.InitSafeguards }}
    {{ . }}
    {{- end }}

    {{- template "assignment_setup" (dict "Assignment" .Assignment "Value" .Assignment.Value) -}}

    {{- $value := include "assignment_value" (dict "Assignment" .Assignment "Value" .Assignment.Value) -}}

    {{- template "assignment_method" (dict "Method" .Assignment.Method "Path" .Assignment.Path "Value" $value) }}
{{- end }}

{{- define "assignment_value" }}
    {{- if not (eq .Value.Constant nil) }}
        {{- .Value.Constant }}
    {{- end }}
    {{- with .Value.Argument }}
        {{- $argName := escapeVar .Name }}

        {{- if or (isBuilder .Type) (resolvesToComposableSlot .Type) }}
            {{- .Type.IsArray | ternary (print $argName "Resources") (print $argName "Resource") }}
        {{- end }}
    {{- end }}
    {{- with .Value.Envelope }}
        {{- template "value_envelope" (dict "Assignment" $.Assignment "Envelope" .) }}
    {{- end }}
{{- end }}

{{- define "assignment_setup" }}
    {{- if not (eq .Value.Constant nil) }}
        this.{{ .Assignment.Path.Last.Identifier | lowerCamelCase }} = {{ .Value.Constant }};
    {{- end }}
    {{- with .Value.Argument }}
        {{- if or (typeHasBuilder .Type) (resolvesToComposableSlot .Type) }}
        {{- if .Type.IsArray }}
        {{ escapeVar .Name }} = new LinkedList<>();
        for (string n : {{ escapeVar .Name }}) {
            {{ escapeVar .Name }} = n.build();
            {{ escapeVar .Name}}.add({{ escapeVar .Name }});
        }
        {{- else }}
        this.{{ .Name | lowerCamelCase }} = {{ .Name | lowerCamelCase}}.build();
        {{- end }}
        {{- end }}
    {{- end }}
    {{- with .Value.Envelope }}
        {{- range .Values }}
        {{- template "assignment_setup" (dict "Assignment" $.Assignment "Value" .Value) }}
        {{- end }}
    {{- end }}
{{- end }}

{{- define "value_envelope" }}
    {{- .Envelope.Type | formatType }}{
        {{- range .Envelope.Values }}
        {{- $value := include "assignment_value" (dict "Assignment" $.Assignment "Value" .Value) }}
        {{ (index .Path 0).Identifier | upperCamelCase }}: {{ $value }},
        {{- end }}
    }
{{- end }}

{{- define "assignment_method" }}
    {{ if eq .Method "direct" }}this.{{ .Path.Last.Identifier }} = {{ .Path.Last.Identifier }};{{ end -}}
    {{ if eq .Method "append" }}this.{{ .Path.Last.Identifier }}.add({{ .Path.Last.Identifier }}){{ end -}}
{{- end }}
