{{- define "assignment" }}
    {{- template "constraints" .Assignment.Constraints }}
    {{- range .Assignment.NilChecks }}
        {{- template "nil_check" . }}
    {{- end }}

    {{- template "assignment_setup" (dict "Assignment" .Assignment "Value" .Assignment.Value) }}

    {{- $value := include "assignment_value" (dict "Assignment" .Assignment "IntoType" .Assignment.Path.Last.Type "Value" .Assignment.Value) -}}

    {{- $preTmpl := print "pre_assignment_" .BuilderName "_" .OptionName }}
    {{- includeIfExists $preTmpl (dict) -}}

    {{- template "assignment_method" (dict "Method" .Assignment.Method "Path" .Assignment.Path "Value" $value) -}}

    {{- $postTmpl := print "post_assignment_" .BuilderName "_" .OptionName }}
    {{- includeIfExists $postTmpl (dict) -}}

{{- end }}

{{- define "assignment_setup" }}
    {{- with .Value.Envelope }}
        {{- range .Values }}
        {{- template "assignment_setup" (dict "Assignment" $.Assignment "Value" .Value) }}
        {{- end }}

        {{- template "value_envelope" (dict "Assignment" $.Assignment "Envelope" .) }}
    {{- end }}
    {{- with .Value.Argument }}
        {{- if or (typeHasBuilder .Type) (resolvesToComposableSlot .Type) }}
        {{- $builtResultName := (print .Name "Resource") }}
        {{- if or .Type.IsArray .Type.IsMap }}
        {{- $builtResultName = (print .Name "Resources") }}
        {{ .Type | formatType }} {{ $builtResultName }} = {{ .Type | emptyValueForType }};
        {{- end }}
        
        {{- template "unfold_builders" (dict "Depth" 1 "InputType" .Type "OriginalInputVar" .Name "InputVar" .Name "AssignmentPath" $.Assignment.Path "ResultVar" $builtResultName) }}
        {{- end }}
    {{- end }}
{{- end }}

{{- define "assignment_value" }}
    {{- if not (eq .Value.Constant nil) }}
        {{- formatRefType .IntoType .Value.Constant }}
    {{- end }}
    {{- with .Value.Argument }}
        {{- if or (typeHasBuilder .Type) (resolvesToComposableSlot .Type) }}
            {{- if or .Type.IsMap .Type.IsArray }}
            {{- .Name | escapeVar | lowerCamelCase }}Resources
            {{- else }}
            {{- .Name | escapeVar | lowerCamelCase }}Resource
            {{- end }}
        {{- else }}
            {{- .Name | escapeVar | lowerCamelCase }}
        {{- end }}
    {{- end }}
    {{- with .Value.Envelope }}
        {{- .Type | formatType | lowerCamelCase }}
    {{- end }}
{{- end }}

{{- define "value_envelope" }}
    {{ $envelopeType := .Envelope.Type | formatType }}
        {{- $envelopeType }} {{ $envelopeType | lowerCamelCase }} = new {{ $envelopeType }}();
    {{- range .Envelope.Values }}
        {{- $value := include "assignment_value" (dict "Assignment" $.Assignment "IntoType" .Path.Last.Type "Value" .Value) }}
        {{ $envelopeType | lowerCamelCase }}.{{ (index .Path 0).Identifier | lowerCamelCase }} = {{ $value }};
    {{- end }}
{{- end }}

{{- define "assignment_method" }}
        {{ $path := formatAssignmentPath "this.internal" .Path }}
        {{- if eq .Method "direct" }}{{ $path }} = {{ .Value }};{{ end }}
        {{- if eq .Method "index" }}
            {{- $index := .Path.Last.Index }}
            {{- $path = formatAssignmentPath "this.internal" .Path.RemoveLast }}
            {{- $path }}.put({{ $index|formatPathIndex }}, {{ .Value }});
        {{- end }}
        {{- if and (eq .Method "index") (.Path.Last.Type.IsArray) }}{{ $path }} = {{ .Value }};{{ end }}
        {{- if eq .Method "append" }}{{ $path }}.add({{ .Value }});{{ end -}}
{{- end }}

{{- define "unfold_builders" }}
    {{- if .InputType.IsArray }}
        for ({{ .InputType.AsArray.ValueType | formatType }} r{{ .Depth }} : {{ .InputVar }}) {
            {{- if .InputType.Array.ValueType.IsArray }}
                {{ .InputType.Array.ValueType | formatType }} {{ .OriginalInputVar }}Depth{{ .Depth }} = {{ .InputType | emptyValueForType }};
                
                {{- template "unfold_builders" (dict "Depth" (add1 .Depth) "InputType" .InputType.Array.ValueType "OriginalInputVar" .OriginalInputVar "InputVar" (print "r" .Depth) "AssignmentPath" $.AssignmentPath "ResultVar" (print .OriginalInputVar "Depth" .Depth)) }}
                
                {{ .ResultVar }}.add({{ .OriginalInputVar }}Depth{{ .Depth }});
            {{- else }}
                {{ .InputType.AsArray.ValueType | formatType }} {{ .OriginalInputVar }}Depth{{ .Depth }} = r{{ .Depth }}.build();
                {{ .ResultVar }}.add({{ .OriginalInputVar }}Depth{{ .Depth }});
            {{- end }} 
        }
    {{- else if .InputType.IsMap }}
        for (var entry{{ .Depth }} : {{ .InputVar }}.entrySet()) {
            {{- if .InputType.Map.ValueType.IsArray }}
                {{- template "unfold_builders" (dict "Depth" (add1 .Depth) "InputType" .InputType.Map.ValueType "OriginalInputVar" .OriginalInputVar "InputVar" (print "entry" .Depth) "AssignmentPath" $.AssignmentPath "ResultVar" (print .OriginalInputVar "Depth" .Depth)) }}
                {{ .ResultVar }}.put(entry{{ .Depth }}.getKey(), entry{{ .Depth }}.getValue());
            {{- else }}
                {{ .OriginalInputVar }}Depth{{ .Depth }} = entry{{ .Depth }}.getValue().build();
                {{ .ResultVar }}.put(entry{{ .Depth }}.getKey(), {{ .OriginalInputVar }}Depth{{ .Depth }});
            {{- end }}           
        }
    {{- else }}
    {{ .InputType | formatType }} {{ .ResultVar }} = {{ .InputVar }}.build();
    {{- end }}
{{- end }}
