package {{ .Package }};

{{- $class := include "builder2" . }}

{{ .Imports }}

{{- $class }}

{{- define "builder2" }}
public class {{ .BuilderName }}Builder{{ if .IsGeneric }}<T extends {{ .BuilderName }}Builder<T>>{{ end }} implements {{ if not (eq .ImportAlias "") }}{{ .ImportAlias }}.{{ end }}cog.Builder<{{ .BuilderSignatureType }}> {
    protected final {{ .ObjectName }} internal;
    
    {{- range .Properties }}
    private {{ .Type | formatBuilderFieldType }} {{ .Name | escapeVar }};
    {{- end }}
    
    public {{ .BuilderName }}Builder({{- template "args" (dict "Arguments" .Constructor.Args "IsBuilder" true) }}) {
        this.internal = new {{ .ObjectName }}();
    {{- range .Constructor.Assignments }}
        {{- template "assignment" (dict "Assignment" . "BuilderName" $.BuilderName "OptionName" "") }}
    {{- end }}
    
    {{- range .Properties }}
    this.{{ .Name | escapeVar }} = {{ .Type | emptyValueForType }};
    {{- end }}

    {{- range .Defaults }}
    {{- range .Initializers }}
    {{ . }}
    {{- end }}
    this.{{ .OptionName | lowerCamelCase | escapeVar }}({{ .Args|join ", " }});
    {{- end }}
    }
    
{{- range $opt := .Options }}
public {{ if $.IsGeneric }}T {{ else }}{{ $.BuilderName }}Builder {{ end }}{{ .Name | lowerCamelCase | escapeVar }}({{- template "args" (dict "Arguments" .Args "IsBuilder" true) }}) {
    {{- range .Assignments }}
        {{- template "assignment" (dict "Assignment" . "BuilderName" $.BuilderName "OptionName" $opt.Name) }}
    {{- end }}
    return {{ if $.IsGeneric }}(T) {{ end }}this;
}
{{ end -}}
    
    public {{ .ObjectName }} build() {
        return this.internal;
    }
}
{{- end }}
