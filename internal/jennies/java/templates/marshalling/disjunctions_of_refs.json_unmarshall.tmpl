package {{ .Package }};

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;

public class {{ .Name }}Deserializer extends JsonDeserializer<{{ .Name }}> {

    @Override
    public {{ .Name }} deserialize(JsonParser jp, DeserializationContext cxt) throws IOException {
        ObjectMapper mapper = (ObjectMapper) jp.getCodec();
        JsonNode root = mapper.readTree(jp);
        
        {{ .Name }} {{ .Name | lowerCamelCase }} = new {{ .Name }}();
        if (!root.has("{{ .Hint.Discriminator }}")) {
            throw new IOException("Cannot find discriminator for {{ .Name }}");
        }
        String discriminator = root.get("{{ .Hint.Discriminator }}").asText();  
        
        switch (discriminator) {
        {{- range $discriminatorValue, $typeName := .Hint.DiscriminatorMapping }}
        {{- if eq $discriminatorValue "cog_discriminator_catch_all" }}
        default:
        {{- else }}
        case "{{ $discriminatorValue }}":
        {{- end }}
            {{ $.Name | lowerCamelCase }}.{{ $typeName | lowerCamelCase }} = mapper.convertValue(root, {{ $typeName | upperCamelCase }}.class);
        {{- end }}
        }
        
        return {{ .Name | lowerCamelCase }};
    }
}
