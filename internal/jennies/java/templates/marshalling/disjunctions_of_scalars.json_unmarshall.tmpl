package {{ .Package }};

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;

public class {{ .Name }}Deserializer extends JsonDeserializer<{{ .Name }}> {

    @Override
    public {{ .Name }} deserialize(JsonParser jp, DeserializationContext cxt) throws IOException {
        ObjectMapper mapper = (ObjectMapper) jp.getCodec();
        JsonNode root = mapper.readTree(jp);
        
        {{ .Name }} {{ .Name | lowerCamelCase }} = new {{ .Name }}();
        
        {{- range $i, $val := .Fields }}
        {{ if gt $i 0 }}else {{ end }}if (root.{{ getJavaFieldTypeCheck .Type }}) {
            {{ $.Name | lowerCamelCase }}.{{ $val.Name | lowerCamelCase }} = mapper.convertValue(root, new TypeReference<>() {});
        }
        {{- end }}
        
        return {{ .Name | lowerCamelCase }};
    }
}
