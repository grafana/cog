{{ range $alias, $importPath := .Imports -}}
import * as {{ $alias }} from '{{ $importPath }}';
{{- end }}
import { CogOptionsBuilder } from '../options_builder_gen';

export class {{ .BuilderName|upperCamelCase }}Builder implements CogOptionsBuilder<{{ .ImportAlias }}.{{ .ObjectName }}> {
    private readonly internal: {{ .ImportAlias }}.{{ .ObjectName }};

    constructor({{ template "args" .Constructor.Args }}) {
        this.internal = {{ .ImportAlias }}.default{{ .ObjectName | upperCamelCase }}();
        {{- range $arg := .Constructor.Assignments }}
        {{- template "constraints" $arg.Constraints }}
        this.internal.{{ $arg.Path }} = {{ template "assignment_value" $arg }};
        {{- end }}
    }

    build(): {{ .ImportAlias }}.{{ .ObjectName }} {
        return this.internal;
    }
{{ range .Options }}
    {{- range .Comments}}
    // {{ . }}
    {{- end }}
    {{ .Name }}({{ template "args" .Args }}): this {
{{- range .Assignments }}
{{- range .InitSafeguards }}
{{ . }}
{{- end }}
{{- template "constraints" .Constraints }}
        {{ if eq .Method "direct" }}this.internal.{{ .Path }} = {{ template "assignment_value" . }};{{ end -}}
        {{ if eq .Method "append" }}this.internal.{{ .Path }}.push({{ template "assignment_value" . }});{{ end -}}
{{ end }}
        return this;
    }
{{ end -}}
}

{{- define "assignment_value" }}
    {{- if not (eq .Value.Constant nil) }}
        {{- formatScalar .Value.Constant }}
    {{- end }}
    {{- with .Value.Argument }}
        {{- $argName := lowerCamelCase .Name }}

        {{- if $.HasBuilder .Type }}
        {{- $argName }}.build()
        {{- else }}
        {{- $argName }}
        {{- end }}
    {{- end }}
{{- end }}
