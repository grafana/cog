{{- range $alias, $importPath := .Imports }}
import * as {{ $alias }} from '{{ $importPath }}';
{{- end }}

{{- range $object := .Objects }}
{{- range $c := $object.Comments }}
// {{ $c }}
{{- end }}
{{- if eq $object.Type "interface" }}
interface {{ $object.Name }} {
{{- template "interface" $object.Fields }}
}
{{- else if eq $object.Type "enum" }}
enum {{ $object.Name }} {
{{- range $field := $object.Fields }}
    {{ $field.Name }} = {{ printf "%#v" $field.Value }},
{{- end }}
}
{{- else if eq $object.Type "type" }}
type {{ $object.Name }} = {{ $object.Value }};
{{- else if eq $object.Type "const" }}
const {{ $object.Name }} = {{ $object.Value }};
{{- else if eq $object.Type "intersection" }}
interface {{ $object.Name }} extends
    {{- range $i, $field := $object.Fields }}
         {{- if eq (len $field.Fields) 0 }}
            {{- if gt $i 0 }}, {{- end }}
            {{ $field.Name }}
         {{- end }}
{
    {{- end }}
    {{- range $field := $object.Fields }}
        {{- if ne (len $field.Fields) 0 }}
            {{- template "interface" $field.Fields }}
        {{- end }}
    {{- end }}
}
{{- else }}
{{ $object.Type }} {{$object.Name }} {{ $object.Type | setOperator }}{{ $object.Value }}{{ $object.Type | setCloser }}
{{- end }}
{{ if $object.HasDefault }}
export const default{{ $object.Name | upperCamelCase }} = (): {{ $object.Name }} => ({{ $object.DefaultValue }}{{- end }});
{{ end }}



