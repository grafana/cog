package {{ .Package }}

import (
    {{ .ImportAlias }} "github.com/grafana/cog/generated"
{{ range $alias, $importPath := .Imports -}}
    {{ $alias }} {{ $importPath }}
{{- end }}
)

var _ {{ .ImportAlias }}.Builder[{{ .ObjectName }}] = (*{{ .ObjectName }}Builder)(nil)

type {{ .BuilderName }}Builder struct {
    internal *{{ .BuilderName }}
    errors map[string]{{ .ImportAlias }}.BuildErrors
}

func New{{ .BuilderName }}Builder() *{{ .BuilderName }}Builder {
	resource := &{{ .BuilderName }}{}
	builder := &{{ .BuilderName }}Builder{
		internal: resource,
		errors: make(map[string]{{ .ImportAlias }}.BuildErrors),
	}

	builder.applyDefaults()

	return builder
}

func (builder *{{ .BuilderName }}Builder) Build() (*{{ .ObjectName }}, error) {
	var errs {{ .ImportAlias }}.BuildErrors

	for _, err := range builder.errors {
		errs = append(errs, {{ .ImportAlias }}.MakeBuildErrors("{{ .BuilderName }}", err)...)
	}

	if len(errs) != 0 {
		return nil, errs
	}

	return builder.internal, nil
}
{{- range .Options }}

{{ range .Comments -}}
// {{ . }}
{{- end }}
func (builder *{{ $.BuilderName }}Builder) {{ .Name }}({{- template "args" .Args }}) *{{ $.BuilderName }}Builder {
    {{- range .Assignments }}
        {{- template "constraints" .Constraints }}
        {{- range .InitSafeguards }}
        {{ . }}
        {{- end }}
        {{- if eq .ValueType "constant" }}
            {{- if .IsNullable }}
                {{- template "method" (dict "Method" .Method "Path" .Path "Value" .Value) }}
            {{- else }}
                val{{ .Path }} := {{ .Value }}
                {{- template "method" (dict "Method" .Method "Path" .Path "Value" `&val{{ .Path }}`) }}
            {{- end }}
        {{- else if eq .ValueType "assigment" }}
            {{- if .IsBuilder }}
            resource, err := {{ .Path | lower }}.Build()
            if err != nil {
                builder.errors["{{ .Path }}"] = err.({{ $.ImportAlias }}.BuildErrors)
                return builder
            }
            {{- end }}
            {{- template "method" (dict "Method" .Method "Path" .Path "Value" .Value) }}
        {{- else if eq .ValueType "envelope" }}
            {{ .Value }}
        {{- end }}
    {{- end }}

    return builder
}
{{- end }}

func (builder *{{ .DefaultBuilder.Name }}Builder) applyDefaults() {
    {{- range .DefaultBuilder.Args }}
    builder.{{ .Name }}({{ .Type }})
    {{- end }}
}
