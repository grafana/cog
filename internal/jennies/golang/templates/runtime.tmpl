package cog

{{ .imports }}

var runtimeInstance *Runtime

type Runtime struct {
	panelcfgVariants  map[string]cogvariants.PanelcfgConfig
	dataqueryVariants map[string]cogvariants.DataqueryConfig
}

func NewRuntime() *Runtime {
    if runtimeInstance != nil {
        return runtimeInstance
    }

	runtimeInstance = &Runtime{
        panelcfgVariants: make(map[string]cogvariants.PanelcfgConfig),
        dataqueryVariants: make(map[string]cogvariants.DataqueryConfig),
	}

	return runtimeInstance
}

func (runtime *Runtime) RegisterPanelcfgVariant(config cogvariants.PanelcfgConfig) {
	runtime.panelcfgVariants[config.Identifier] = config
}

func (runtime *Runtime) ConfigForPanelcfgVariant(identifier string) (cogvariants.PanelcfgConfig, bool) {
	config, found := runtime.panelcfgVariants[identifier]

	return config, found
}

func (runtime *Runtime) RegisterDataqueryVariant(config cogvariants.DataqueryConfig) {
	runtime.dataqueryVariants[config.Identifier] = config
}

func (runtime *Runtime) UnmarshalDataqueryArray(raw []byte) ([]cogvariants.Dataquery, error) {
	rawDataqueries := []json.RawMessage{}
	if err := json.Unmarshal(raw, &rawDataqueries); err != nil {
		return nil, err
	}

	dataqueries := make([]cogvariants.Dataquery, 0, len(rawDataqueries))
	for _, rawDataquery := range rawDataqueries {
		dataquery, err := runtime.UnmarshalDataquery(rawDataquery)
		if err != nil {
			return nil, err
		}

		dataqueries = append(dataqueries, dataquery)
	}

	return dataqueries, nil
}

func (runtime *Runtime) UnmarshalDataquery(raw []byte) (cogvariants.Dataquery, error) {
	var empty cogvariants.Dataquery

	for _, config := range runtime.dataqueryVariants {
		if config.DataqueryUnmarshaler == nil {
			continue
		}

		dataquery, err := config.DataqueryUnmarshaler(raw)
		if err != nil {
			continue
		}

		return dataquery.(cogvariants.Dataquery), nil
	}

	return empty, fmt.Errorf("could not unmarshal dataquery")
}

func UnmarshalDataqueryArray(raw []byte) ([]cogvariants.Dataquery, error) {
	return NewRuntime().UnmarshalDataqueryArray(raw)
}

func UnmarshalDataquery(raw []byte) (cogvariants.Dataquery, error) {
	return NewRuntime().UnmarshalDataquery(raw)
}
