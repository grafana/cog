package {{ .Converter.Package | formatPackageName }}

{{ $converter := include "converter" . }}

{{ .Imports }}

{{ $converter }}

{{- define "guard" }}
    {{- if and (eq .Op "!=") (eq .Value nil) -}}
        {{ .Path | formatPath }} != nil
    {{- else -}}
        {{- $leftOperand := print (.Path.Last.Type | maybeDereference) (.Path | formatPath) -}}
        {{- $operator := .Op -}}
        {{- if eq .Op "minLength" -}}
            {{- $leftOperand = print "len(" $leftOperand ")" -}}
            {{- $operator = ">=" -}}
        {{- end -}}
        {{- if eq .Op "maxLength" -}}
            {{- $leftOperand = print "len(" $leftOperand ")" -}}
            {{- $operator = "<=" -}}
        {{- end -}}
        {{- $leftOperand }} {{ $operator}} {{ .Value | formatScalar -}}
    {{- end -}}
{{- end }}

{{- define "value_formatter" -}}
    {{- if .Type.IsAny -}}
        cog.Dump({{ .Path | formatPath }})
    {{- else if .Type.IsScalar -}}
        fmt.Sprintf("%#v", {{ .Type | maybeDereference }}{{ .Path | formatPath }})
    {{- else -}}
        cog.Dump({{ .Type | maybeDereference }}{{ .Path | formatPath }})
    {{- end -}}
{{- end }}

{{- define "guards" }}
    {{- $guardsCount := (sub (len .) 1) -}}
    {{- range $i, $guard := . }}{{- template "guard" $guard }}{{ if ne $i $guardsCount }} && {{ end }}{{ end }}
{{- end }}

{{- define "prepare_arg" -}}
    {{- with .Arg.Builder -}}
        {{ $.IntoVar }} := {{ formatRawRef .BuilderPkg (print .BuilderName "Converter") }}({{- if not .ValueType.Nullable}}&{{ end }}{{ .ValuePath | formatPath }})
    {{- end -}}
    {{- with .Arg.Array -}}
        tmp{{ $.IntoVar }} := []string{}
        for _, {{ .ValueAs | formatPath }} := range {{ .For | formatPath }} {
            {{- $subIntoVar := print "tmp" .For.Last.Identifier (.ValueAs | formatPath) }}
            {{ template "prepare_arg" (dict "IntoVar" $subIntoVar "Arg" .ForArg) }}
            tmp{{ $.IntoVar }} = append(tmp{{ $.IntoVar }}, {{ $subIntoVar }})
        }
        {{ $.IntoVar }} := "{{ .ForType | formatType }}{" + strings.Join(tmp{{ $.IntoVar }}, ",\n") + "}"
    {{- end -}}
    {{- with .Arg.Runtime -}}
        {{ $.IntoVar }} := cog.{{ .FuncName }}({{ range $i, $runtimeArg := .Args }}{{ if eq $i 0}}{{ $runtimeArg.ValuePath | formatPath }}{{ else }}{{ maybeUnptr ($runtimeArg.ValuePath | formatPath) $runtimeArg.ValueType }}{{ end }}, {{ end }})
    {{- end -}}
    {{- with .Arg.Direct -}}
        {{ $.IntoVar }} := {{- template "value_formatter" (dict "Type" .ValueType "Path" .ValuePath ) -}}
    {{- end -}}
{{- end }}

{{- define "converter" -}}
func {{ .Converter.BuilderName | upperCamelCase }}Converter(input *{{ formatRawRef .Converter.Input.TypeRef.ReferredPkg .Converter.Input.TypeRef.ReferredType  }}) string {
    {{- $constructorArgsCount := (sub (len .Converter.ConstructorArgs) 1) }}
    calls := []string{
        `{{ .Converter.Package | formatPackageName }}.New{{ .Converter.BuilderName | upperCamelCase }}Builder({{ with .Converter.ConstructorArgs}}`+{{ range $i, $arg := . }}{{- template "value_formatter" (dict "Type" $arg.ValueType "Path" $arg.ValuePath ) -}}{{- if ne $i $constructorArgsCount }} + ", " +{{ end }}{{ end }}+`{{ end }})`,
    }

    {{- range .Converter.Mappings }}
    {{ with .Guards }}if {{ template "guards" . }}{{ end }}{
        var buffer strings.Builder

        {{ if ne .RepeatFor nil -}}
        {{- $argsCount := (sub (len .Args) 1) -}}
        for _, {{ .RepeatAs }} := range {{ .RepeatFor | formatPath }} {
            {{- range $arg := .Args }}
            {{ with $arg.Guards -}}
                if !({{ template "guards" . }}) {
                    continue
                }
            {{ end }}
            {{- end }}

            buffer.WriteString(`{{ .Option.Name | upperCamelCase }}(`)
            {{- range $i, $arg := .Args }}
                {{- $intoVar := print "arg" $i }}
                {{ template "prepare_arg" (dict "IntoVar" $intoVar "Arg" $arg) }}
                buffer.WriteString({{ $intoVar }})
                {{- if ne $i $argsCount }}
                    buffer.WriteString(", ")
                {{- end }}
            {{- end }}
            buffer.WriteString(")")

            calls = append(calls, buffer.String())
            buffer.Reset()
        }
        {{- else }}
        buffer.WriteString(`{{ .Option.Name | upperCamelCase }}(`)
        {{- $argsCount := (sub (len .Args) 1) -}}
        {{- range $i, $arg := .Args }}
            {{- $intoVar := print "arg" $i }}
            {{ template "prepare_arg" (dict "IntoVar" $intoVar "Arg" $arg) }}
            buffer.WriteString({{ $intoVar }})
            {{- if ne $i $argsCount }}
                buffer.WriteString(", ")
            {{- end }}
        {{- end }}
        buffer.WriteString(")")

        calls = append(calls, buffer.String())
        {{- end }}
    }
    {{- end }}

    return strings.Join(calls, ".\t\n")
}
{{- end }}
