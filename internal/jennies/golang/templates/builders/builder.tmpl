package {{ .Package | formatPackageName }}
{{ $options := include "options" . }}
{{ .Imports }}

var _ cog.Builder[{{ .BuilderSignatureType }}] = (*{{ .BuilderName }}Builder)(nil)
{{ range .Comments }}
// {{ . }}
{{- end }}
type {{ .BuilderName }}Builder struct {
    internal *{{ .ObjectName }}
    errors map[string]cog.BuildErrors

    {{- range .Properties }}
    {{ .Name }} {{ .Type | formatType }}
    {{- end }}
}

func New{{ .BuilderName }}Builder({{- template "args" .Constructor.Args }}) *{{ .BuilderName }}Builder {
	builder := &{{ .BuilderName }}Builder{
		internal: {{ .ConstructorName }}(),
		errors: make(map[string]cog.BuildErrors),
	}

    {{- range .Constructor.Assignments }}
        {{- template "assignment" (dict "Assignment" . "Builder" $ "Option" (dict "Name" "")) }}
    {{- end }}

	return builder
}

func (builder *{{ .BuilderName }}Builder) Build() ({{ .BuilderSignatureType }}, error) {
	if err := builder.internal.Validate(); err != nil {
		return {{ .ObjectName }}{}, err
	}

	return *builder.internal, nil
}
{{- $options }}
