{{- define "assignment" }}
    {{- template "constraints" .Constraints }}
    {{- range .InitSafeguards }}
    {{ . }}
    {{- end }}

    {{- template "assignment_setup" (dict "Assignment" . "Value" .Value) -}}

    {{- $value := include "assignment_value" (dict "Assignment" . "Value" .Value) -}}

    {{- template "assignment_method" (dict "Method" $.Method "Path" $.Path "Value" $value) }}
{{- end }}

{{- define "assignment_value" }}
    {{- if not (eq .Value.Constant nil) }}
        {{- if isNullableNonArray .Assignment.Path.Last.Type }}
            {{- print "&val" .Assignment.Path.Last.Identifier }}
        {{- else }}
            {{- formatScalar .Value.Constant }}
        {{- end }}
    {{- end }}
    {{- with .Value.Argument }}
        {{- $argName := formatArgName .Name }}

        {{- if (typeHasBuilder .Type) }}
        {{- $argName = (print $argName "Resource") }}
        {{- end }}

        {{- maybeAsPointer (isNullableNonArray $.Assignment.Path.Last.Type) $argName }}
    {{- end }}
    {{- with .Value.Envelope }}
        {{- template "value_envelope" (dict "Assignment" $.Assignment "Envelope" .) }}
    {{- end }}
{{- end }}

{{- define "assignment_setup" }}
    {{- if not (eq .Value.Constant nil) }}
        {{- if .Assignment.Path.Last.Type.Nullable }}
            val{{ .Assignment.Path }} := {{ formatScalar .Value.Constant }}
        {{- end }}
    {{- end }}
    {{- with .Value.Argument }}
        {{- if (typeHasBuilder .Type) }}
        {{ formatArgName .Name}}Resource, err := {{ formatArgName .Name}}.Build()
        if err != nil {
            builder.errors["{{ $.Assignment.Path }}"] = err.(cog.BuildErrors)
            return builder
        }
        {{- end }}
    {{- end }}
    {{- with .Value.Envelope }}
        {{- range .Values }}
        {{- template "assignment_setup" (dict "Assignment" $.Assignment "Value" .Value) }}
        {{- end }}
    {{- end }}
{{- end }}

{{- define "value_envelope" }}
    {{- .Envelope.Type | formatType }}{
        {{- range .Envelope.Values }}
        {{- $value := include "assignment_value" (dict "Assignment" $.Assignment "Value" .Value) }}
        {{- $value = maybeAsPointer (.Path.Last.Type.Nullable) $value }}
        {{ (index .Path 0).Identifier | formatIdentifier }}: {{ $value }},
        {{- end }}
    }
{{- end }}

{{- define "assignment_method" }}
    {{ if eq .Method "direct" }}builder.internal.{{ .Path|formatPath }} = {{ .Value }}{{ end -}}
    {{ if eq .Method "append" }}builder.internal.{{ .Path|formatPath }} = append(builder.internal.{{ .Path|formatPath }}, {{ .Value }}){{ end -}}
{{- end }}
