package cog

{{ .imports }}

var runtimeInstance *Runtime

type Runtime struct {
	panelcfgVariants  map[string]variants.PanelcfgConfig
	dataqueryVariants map[string]variants.DataqueryConfig
}

func NewRuntime() *Runtime {
    if runtimeInstance != nil {
        return runtimeInstance
    }

	runtimeInstance = &Runtime{
        panelcfgVariants: make(map[string]variants.PanelcfgConfig),
        dataqueryVariants: make(map[string]variants.DataqueryConfig),
	}

	return runtimeInstance
}

func (runtime *Runtime) RegisterPanelcfgVariant(config variants.PanelcfgConfig) {
	runtime.panelcfgVariants[config.Identifier] = config
}

func (runtime *Runtime) ConfigForPanelcfgVariant(identifier string) (variants.PanelcfgConfig, bool) {
	config, found := runtime.panelcfgVariants[identifier]

	return config, found
}

func (runtime *Runtime) RegisterDataqueryVariant(config variants.DataqueryConfig) {
	runtime.dataqueryVariants[config.Identifier] = config
}

func (runtime *Runtime) UnmarshalDataqueryArray(raw []byte, dataqueryTypeHint string) ([]variants.Dataquery, error) {
	rawDataqueries := []json.RawMessage{}
	if err := json.Unmarshal(raw, &rawDataqueries); err != nil {
		return nil, err
	}

	dataqueries := make([]variants.Dataquery, 0, len(rawDataqueries))
	for _, rawDataquery := range rawDataqueries {
		dataquery, err := runtime.UnmarshalDataquery(rawDataquery, dataqueryTypeHint)
		if err != nil {
			return nil, err
		}

		dataqueries = append(dataqueries, dataquery)
	}

	return dataqueries, nil
}

func (runtime *Runtime) UnmarshalDataquery(raw []byte, dataqueryTypeHint string) (variants.Dataquery, error) {
	// A hint tells us the dataquery type: let's use it.
	if dataqueryTypeHint != "" {
		config, found := runtime.dataqueryVariants[dataqueryTypeHint]
		if found {
			dataquery, err := config.DataqueryUnmarshaler(raw)
			if err != nil {
				return nil, err
			}

			return dataquery.(variants.Dataquery), nil
		}
	}

	// Dataqueries might reference the datasource to use, and its type. Let's use that.
	partialDataquery := struct {
		Datasource struct {
			Type string `json:"type"`
		} `json:"datasource"`
	}{}
	if err := json.Unmarshal(raw, &partialDataquery); err != nil {
		return nil, err
	}
	if partialDataquery.Datasource.Type != "" {
		config, found := runtime.dataqueryVariants[partialDataquery.Datasource.Type]
		if found {
			dataquery, err := config.DataqueryUnmarshaler(raw)
			if err != nil {
				return nil, err
			}

			return dataquery.(variants.Dataquery), nil
		}
	}

	// We have no idea what type the dataquery is: use our `UnknownDataquery` bag to not lose data.
	dataquery := variants.UnknownDataquery{}
	if err := json.Unmarshal(raw, &dataquery); err != nil {
		return nil, err
	}

	return dataquery, nil
}

func UnmarshalDataqueryArray(raw []byte, dataqueryTypeHint string) ([]variants.Dataquery, error) {
	return NewRuntime().UnmarshalDataqueryArray(raw, dataqueryTypeHint)
}

func UnmarshalDataquery(raw []byte, dataqueryTypeHint string) (variants.Dataquery, error) {
	return NewRuntime().UnmarshalDataquery(raw, dataqueryTypeHint)
}

func ConfigForPanelcfgVariant(identifier string) (variants.PanelcfgConfig, bool) {
	return NewRuntime().ConfigForPanelcfgVariant(identifier)
}
