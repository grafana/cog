{{- $json := importStdPkg "encoding/json" -}}
func (resource *{{ .def.Name|upperCamelCase }}) StrictUnmarshalJSON(raw []byte) error {
	if raw == nil {
		return nil
	}

	{{- $cog := importPkg "cog" }}
	var errs cog.BuildErrors

	fields := make(map[string]json.RawMessage)
	if err := json.Unmarshal(raw, &fields); err != nil {
		return err
	}
	{{- range $field := .def.Type.Struct.Fields }}

	// Field "{{ $field.Name }}"
	if fields[{{ $field.Name|formatScalar }}] != nil {
		if string(fields[{{ $field.Name|formatScalar }}]) != "null" {
			{{ template "strict_unmarshal_field_type" (dict "Field" $field) }}
		{{ if $field.Required -}} } else {
			{{- $errors := importStdPkg "errors" -}}
			errs = append(errs, cog.MakeBuildErrors({{ $field.Name|formatScalar }}, errors.New("required field is null"))...)
		{{ end }}
		}
		delete(fields, {{ $field.Name|formatScalar }})
	{{ if $field.Required -}} } else {
		{{- $errors := importStdPkg "errors" -}}
		errs = append(errs, cog.MakeBuildErrors({{ $field.Name|formatScalar }}, errors.New("required field is missing from input"))...)
	{{- end }}
	}
	{{- end }}

	{{ $fmt := importStdPkg "fmt" -}}
	for field := range fields {
		errs = append(errs, cog.MakeBuildErrors("{{ .def.Name|upperCamelCase }}", fmt.Errorf("unexpected field %s", field))...)
	}

	if len(errs) == 0 {
		return nil
	}

	return errs
}

{{/* arguments: Field */}}
{{- define "strict_unmarshal_field_type" -}}
	{{- if or (resolvesToScalar .Field.Type) -}}
			if err := json.Unmarshal(fields[{{ .Field.Name|formatScalar }}], &resource.{{ .Field.Name|upperCamelCase }}); err != nil {
				errs = append(errs, cog.MakeBuildErrors({{ .Field.Name|formatScalar }}, err)...)
			}
	{{- else if and .Field.Type.IsRef (resolvesToStruct .Field.Type) }}
			resource.{{ .Field.Name|upperCamelCase }} = {{ if .Field.Type.Nullable}}&{{ end }}{{ formatRawRef .Field.Type.Ref.ReferredPkg .Field.Type.Ref.ReferredType }}{}
			if err := resource.{{ .Field.Name|upperCamelCase }}.StrictUnmarshalJSON(fields[{{ .Field.Name|formatScalar }}]); err != nil {
				errs = append(errs, cog.MakeBuildErrors({{ .Field.Name|formatScalar }}, err)...)
			}
	{{- else -}}
			{{/* TODO: uncomment later → found an unimplemented unmarshal case  intentionally left uncommented, to trigger a failure during codegen */}}
			// TODO: implement me :( → {{ .Field.Type.Kind }}
	{{- end -}}
{{- end -}}
