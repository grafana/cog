{{- $json := importStdPkg "encoding/json" -}}
{{- $errors := importStdPkg "errors" -}}
func (resource *{{ .def.Name|upperCamelCase }}) StrictUnmarshalJSON(raw []byte) error {
	if raw == nil {
		return nil
	}

	{{- $cog := importPkg "cog" }}
	var errs cog.BuildErrors
	var errList []error
{{ range .def.Type.Struct.Fields }}
	// {{ .Name|upperCamelCase }}
	var {{ .Name }} {{ trimPrefix "*" (.Type | formatType) }}

	if err := json.Unmarshal(raw, &{{ .Name }}); err != nil {
		errList = append(errList, err)
	} else {
		resource.{{ .Name|upperCamelCase }} = {{ if and (ne .Type.Kind "array") (ne .Type.Kind "map") }}&{{ end }}{{ .Name }}
		return nil
	}
{{ end }}

	if len(errList) != 0 {
		errs = append(errs, cog.MakeBuildErrors("{{ .def.Name|upperCamelCase }}", errors.Join(errList...))...)
	}

	if len(errs) == 0 {
		return nil
	}

	return errs
}
