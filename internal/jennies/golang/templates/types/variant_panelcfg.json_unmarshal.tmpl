{{- $json := importStdPkg "encoding/json" -}}
// VariantConfig returns the configuration related to {{ .schema.Metadata.Identifier|lower }} panels.
// This configuration describes how to unmarshal it, convert it to code, â€¦
func VariantConfig() variants.PanelcfgConfig {
	return variants.PanelcfgConfig{
		Identifier: "{{ .schema.Metadata.Identifier|lower }}",
		{{- if .hasOptions }}
		OptionsUnmarshaler: func (raw []byte) (any, error) {
			options := &Options{}

			if err := json.Unmarshal(raw, options); err != nil {
				return nil, err
			}

			return options, nil
		},
		StrictOptionsUnmarshaler: func (raw []byte) (any, error) {
			options := &Options{}

			if err := options.UnmarshalJSONStrict(raw); err != nil {
                return nil, err
            }

			return options, nil
		},
		{{- end }}
		{{- if .hasFieldConfig }}
		FieldConfigUnmarshaler: func (raw []byte) (any, error) {
			fieldConfig := &FieldConfig{}

			if err := json.Unmarshal(raw, fieldConfig); err != nil {
				return nil, err
			}

			return fieldConfig, nil
		},
		StrictFieldConfigUnmarshaler: func (raw []byte) (any, error) {
			fieldConfig := &FieldConfig{}

			if err := fieldConfig.UnmarshalJSONStrict(raw); err != nil {
                return nil, err
            }

			return fieldConfig, nil
		},
		{{- end }}
		{{- if .hasConverter }}
		GoConverter: func(inputPanel any) string {
			if panel, ok := inputPanel.(*dashboard.Panel); ok {
				return PanelConverter(*panel)
			}

			return PanelConverter(inputPanel.(dashboard.Panel))
		},
		{{- end }}
	}
}

