{{- $json := importStdPkg "encoding/json" -}}
{{- $errors := importStdPkg "errors" -}}
{{- $bytes := importStdPkg "bytes" -}}
// UnmarshalJSON implements a custom JSON unmarshalling logic to decode `{{ .def.Name|formatObjectName }}` from JSON.
func (resource *{{ .def.Name|formatObjectName }}) UnmarshalJSON(raw []byte) error {
	if raw == nil {
		return nil
	}

	var errList []error
{{ range .def.Type.Struct.Fields }}
	// {{ .Name|upperCamelCase }}
	var {{ .Name }} {{ trimPrefix "*" (.Type | formatType) }}
	{{- if .Type.IsRef }}
    {{ .Name | lowerCamelCase }}dec := json.NewDecoder(bytes.NewReader(raw))
    {{ .Name | lowerCamelCase }}dec.DisallowUnknownFields()
    if err := {{ .Name | lowerCamelCase }}dec.Decode(&{{ .Name }}); err != nil {
        errList = append(errList, err)
        resource.{{ .Name|formatFieldName }} = nil
    } else {
        resource.{{ .Name|formatFieldName }} = &{{ .Name }}
        return nil
    }
    {{- else }}
	if err := json.Unmarshal(raw, &{{ .Name }}); err != nil {
		errList = append(errList, err)
		resource.{{ .Name|formatFieldName }} = nil
	} else {
		resource.{{ .Name|formatFieldName }} = {{ if and (ne .Type.Kind "array") (ne .Type.Kind "map") }}&{{ end }}{{ .Name }}
		return nil
	}
	{{- end }}
{{ end }}
	return errors.Join(errList...)
}
