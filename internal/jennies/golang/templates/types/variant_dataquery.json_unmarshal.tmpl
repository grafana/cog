{{- $json := importStdPkg "encoding/json" -}}
// VariantConfig returns the configuration related to {{ .schema.Metadata.Identifier|lower }} dataqueries.
// This configuration describes how to unmarshal it, convert it to code, â€¦
func VariantConfig() variants.DataqueryConfig {
	return variants.DataqueryConfig{
		Identifier: "{{ .schema.Metadata.Identifier|lower }}",
	    DataqueryUnmarshaler: func (raw []byte) (variants.Dataquery, error) {
            dataquery := &{{ .object.Name|formatObjectName }}{}

            if err := json.Unmarshal(raw, dataquery); err != nil {
                return nil, err
            }

            return dataquery, nil
       },
	    StrictDataqueryUnmarshaler: func (raw []byte) (variants.Dataquery, error) {
            dataquery := &{{ .object.Name|formatObjectName }}{}

            if err := dataquery.UnmarshalJSONStrict(raw); err != nil {
                return nil, err
            }

            return dataquery, nil
       },
        {{- if .hasConverter }}
        GoConverter: func(input any) string {
            var dataquery {{ .object.Name|formatObjectName }}
            if cast, ok := input.(*{{ .object.Name|formatObjectName }}); ok {
                dataquery = *cast
            } else {
                dataquery = input.({{ .object.Name|formatObjectName }})
            }
            {{ if ne .disjunctionStruct nil -}}
                {{- range $field := .disjunctionStruct.Fields }}
                    if dataquery.{{ $field.Name|formatFieldName }} != nil {
                        return {{ $field.Type.Ref.ReferredType|formatObjectName }}Converter(*dataquery.{{ $field.Name|formatFieldName }})
                    }
                {{- end }}

                return ""
            {{- else -}}
                return {{ .object.Name|formatObjectName }}Converter(dataquery)
            {{- end }}
        },
        {{- end }}
	}
}

